/*! @license JSCLI v1.0.0 | (c) Takumi Daimon | https://t-daimon.jp/ */
function JSCLI(textarea, handler) {
    var $iostream = document.getElementById(textarea), $streamOpening = !1, $entered = !1, $stdinQueue = [], last, MODE = "light", ocnt = 0, icnt = 0;
    const onentered = "function" == typeof handler ? handler : function(e) {}
      , KEY_ENTER = 13
      , $commonStyle = {
        fontSize: "14px",
        height: "400px",
        width: "auto",
        border: "1px solid rgb(179, 179, 179)",
        lineHeight: "1.1em"
    };
    function setCommonStyle(style) {
        for (let i in style)
            $commonStyle[i] = style[i];
        changeMode(MODE)
    }
    function getStyle(key) {
        const $styles = {
            token: {
                fontFamily: "'Oxygen Mono', Consolas, 'Liberation Mono', 'DejaVu Sans Mono', monospace",
                fontSize: "inherit",
                margin: "0",
                padding: "0",
                lineHeight: "inherit",
                minWidth: "1em",
                outline: "none",
                backgroundColor: "transparent"
            }
        };
        return $styles[key]
    }
    function getMode(key) {
        const $modes = {
            light: {
                cli: {
                    backgroundColor: "rgb(255, 255, 255)",
                    color: "rgb(0, 0, 0)",
                    fontFamily: " 'Oxygen Mono', Consolas, 'Liberation Mono', 'DejaVu Sans Mono', monospace",
                    margin: "0",
                    padding: ".1em 0 1.5em .3em",
                    overflow: "auto"
                },
                in: {
                    color: "rgb(36, 179, 0)"
                },
                out: {
                    color: "rgb(0, 0, 0)"
                },
                a: {
                    color: "#007bff",
                    backgroundColor: "transparent"
                }
            },
            gray: {
                cli: {
                    backgroundColor: "rgb(233, 236, 239)",
                    color: "rgb(0, 0, 0)",
                    fontFamily: " 'Oxygen Mono', Consolas, 'Liberation Mono', 'DejaVu Sans Mono', monospace",
                    margin: "0",
                    padding: ".1em 0 1.5em .3em",
                    overflow: "auto"
                },
                in: {
                    color: "rgb(36, 179, 0)"
                },
                out: {
                    color: "rgb(0, 0, 0)"
                },
                a: {
                    color: "#007bff",
                    backgroundColor: "transparent"
                }
            },
            dark: {
                cli: {
                    backgroundColor: "#000",
                    color: "rgb(255, 255, 255)",
                    fontFamily: " 'Oxygen Mono', Consolas, 'Liberation Mono', 'DejaVu Sans Mono', monospace",
                    margin: "0",
                    padding: ".1em 0 1.5em .3em",
                    overflow: "auto"
                },
                in: {
                    color: "rgb(36, 179, 0)"
                },
                out: {
                    color: "rgb(255, 255, 255)"
                },
                a: {
                    color: "#007bff",
                    backgroundColor: "transparent"
                }
            }
        };
        let r = $modes[key];
        for (let i in $commonStyle)
            r.cli[i] = $commonStyle[i];
        return r
    }
    function setStyle(tatget, style) {
        if (tatget)
            for (let i in style)
                tatget.style[i] = style[i]
    }
    function changeMode(mode) {
        let m = getMode(mode);
        if (m) {
            MODE = mode,
            setStyle($iostream, m.cli);
            for (let i = 0; i < ocnt; i++)
                setStyle(document.getElementById("out" + i), m.out);
            setStyle($iostream.querySelector("a"), m.a)
        }
    }
    function kevHandler(event) {
        if (!$streamOpening)
            return !1;
        let keyCode = event.which;
        if (!$entered && 13 == keyCode) {
            let stdinStr_ = last.innerText
              , stdinStr = last.innerText.trim()
              , splt = stdinStr.split("\n").filter(word=>word.length > 0);
            if (0 == splt.length)
                return !0;
            stdinStr = splt.shift(),
            onentered(void 0 === stdinStr ? "" : stdinStr),
            $stdinQueue = $stdinQueue.concat(splt);
            let id = last.id;
            return last.innerText = stdinStr_ + "\n",
            last.contentEditable = !1,
            setTimeout(()=>{
                let lst = document.getElementById(id);
                lst.innerText = stdinStr_ + "\n",
                lst.contentEditable = !1
            }
            , 10),
            $streamOpening = !1,
            $entered = !0,
            !1
        }
        return !0
    }
    function isStreamOpening() {
        return $streamOpening
    }
    function openStream() {
        if (0 == $stdinQueue.length)
            last = document.createElement("span"),
            $iostream.contentEditable = !1,
            last.id = "in" + icnt,
            icnt++,
            setStyle(last, getStyle("token")),
            setStyle(last, getMode(MODE).in),
            last.contentEditable = !0,
            last.addEventListener("paste", (function(e) {
                var text;
                if (e.preventDefault(),
                text = window.clipboardData ? window.clipboardData.getData("text") : e.clipboardData.getData("text/plain"),
                document.selection) {
                    var range;
                    (range = document.selection.createRange()).text = text
                } else {
                    var selection = window.getSelection()
                      , range = selection.getRangeAt(0)
                      , node = document.createTextNode(text);
                    range.insertNode(node),
                    range.setStartAfter(node),
                    range.setEndAfter(node),
                    selection.removeAllRanges(),
                    selection.addRange(range)
                }
            }
            ), !1),
            last.onkeypress = kevHandler,
            last.onkeydown = kevHandler,
            $iostream.appendChild(last),
            last.focus(),
            $streamOpening = !0,
            $entered = !1;
        else {
            let stdinStr = $stdinQueue.shift();
            onentered(void 0 === stdinStr ? "" : stdinStr),
            $streamOpening = !1,
            $entered = !0
        }
    }
    function closeStream() {
        last && (last.contentEditable = !1),
        $streamOpening = !1,
        $entered = !0
    }
    function write(msg) {
        let span = document.createElement("span");
        setStyle(span, getStyle("token")),
        span.innerText = msg,
        setStyle(span, getMode(MODE).out),
        span.id = "out" + ocnt,
        ocnt++,
        $iostream.appendChild(span),
        $iostream.scrollTop = $iostream.scrollHeight
    }
    function writeDOM(dom) {
        let span = document.createElement("span");
        setStyle(span, getStyle("token")),
        span.innerHTML = dom,
        setStyle(span.querySelector("a"), getMode(MODE).a),
        $iostream.appendChild(span),
        $iostream.scrollTop = $iostream.scrollHeight
    }
    function getText() {
        return $iostream.innerText
    }
    function getHTML() {
        return $iostream.innerHTML
    }
    function setHTML(html) {
        $iostream.innerHTML = html
    }
    function setText(txt) {
        ocnt = 0,
        icnt = 0,
        $iostream.innerHTML = "",
        write(txt)
    }
    function hasStdin() {
        return $stdinQueue.length > 0
    }
    function dequeueStdin() {
        let stdinStr = $stdinQueue.shift();
        return void 0 === stdinStr ? "" : stdinStr
    }
    function clear() {
        ocnt = 0,
        icnt = 0,
        $iostream.innerHTML = "",
        $stdinQueue = []
    }
    function init() {
        this.openStream = openStream,
        this.closeStream = closeStream,
        this.onentered = onentered,
        this.write = write,
        this.getText = getText,
        this.setText = setText,
        this.clear = clear,
        this.isStreamOpening = isStreamOpening,
        this.hasStdin = hasStdin,
        this.dequeueStdin = dequeueStdin,
        this.writeDOM = writeDOM,
        this.changeMode = changeMode,
        this.setCommonStyle = setCommonStyle,
        this.getHTML = getHTML,
        this.setHTML = setHTML
    }
    var $jscli;
    return changeMode(MODE),
    $iostream.ondrop = function(event) {
        event.preventDefault()
    }
    ,
    $iostream.onclick = function() {
        last && $streamOpening && last.focus()
    }
    ,
    new init
}
