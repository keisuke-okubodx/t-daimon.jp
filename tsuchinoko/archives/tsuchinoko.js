/*! @license TSUCHINOKO v1.0.0 | (c) Takumi Daimon | https://t-daimon.jp */
(function(global) {
  global.TSUCHINOKO = {};
  var CORE = "";
  !function(L) {
      var p, f, H = null, O, I, D, A, v, F, l, C, w, M, s, E, J, N, W = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535], P = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0], Q = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99], R = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577], S = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13], T = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], U = function() {
          this.list = this.next = null
      }, V = function() {
          this.n = this.b = this.e = 0,
          this.t = null
      }, G = function(t, x, u, b, a, q) {
          this.BMAX = 16,
          this.N_MAX = 288,
          this.status = 0,
          this.root = null,
          this.m = 0;
          var r = Array(this.BMAX + 1), n, c, m, k, d, e, g, h = Array(this.BMAX + 1), f, l, B, y = new V, s = Array(this.BMAX);
          k = Array(this.N_MAX);
          var z, p = Array(this.BMAX + 1), v, w, A;
          for (A = this.root = null,
          d = 0; d < r.length; d++)
              r[d] = 0;
          for (d = 0; d < h.length; d++)
              h[d] = 0;
          for (d = 0; d < s.length; d++)
              s[d] = null;
          for (d = 0; d < k.length; d++)
              k[d] = 0;
          for (d = 0; d < p.length; d++)
              p[d] = 0;
          n = 256 < x ? t[256] : this.BMAX,
          f = t,
          l = 0,
          d = x;
          do {
              r[f[l]]++,
              l++
          } while (0 < --d);
          if (r[0] == x)
              this.root = null,
              this.status = this.m = 0;
          else {
              for (e = 1; e <= this.BMAX && 0 == r[e]; e++)
                  ;
              for (g = e,
              q < e && (q = e),
              d = this.BMAX; 0 != d && 0 == r[d]; d--)
                  ;
              for (m = d,
              q > d && (q = d),
              v = 1 << e; e < d; e++,
              v <<= 1)
                  if (0 > (v -= r[e]))
                      return this.status = 2,
                      void (this.m = q);
              if (0 > (v -= r[d]))
                  this.status = 2,
                  this.m = q;
              else {
                  for (r[d] += v,
                  p[1] = e = 0,
                  f = r,
                  l = 1,
                  B = 2; 0 < --d; )
                      p[B++] = e += f[l++];
                  f = t,
                  d = l = 0;
                  do {
                      0 != (e = f[l++]) && (k[p[e]++] = d)
                  } while (++d < x);
                  for (x = p[m],
                  p[0] = d = 0,
                  f = k,
                  l = 0,
                  k = -1,
                  z = h[0] = 0,
                  B = null,
                  w = 0; g <= m; g++)
                      for (t = r[g]; 0 < t--; ) {
                          for (; g > z + h[1 + k]; ) {
                              if (z += h[1 + k],
                              k++,
                              w = (w = m - z) > q ? q : w,
                              (c = 1 << (e = g - z)) > t + 1)
                                  for (c -= t + 1,
                                  B = g; ++e < w && !((c <<= 1) <= r[++B]); )
                                      c -= r[B];
                              for (z + e > n && z < n && (e = n - z),
                              w = 1 << e,
                              h[1 + k] = e,
                              B = Array(w),
                              c = 0; c < w; c++)
                                  B[c] = new V;
                              (A = null == A ? this.root = new U : A.next = new U).next = null,
                              A.list = B,
                              s[k] = B,
                              0 < k && (p[k] = d,
                              y.b = h[k],
                              y.e = 16 + e,
                              y.t = B,
                              e = (d & (1 << z) - 1) >> z - h[k],
                              s[k - 1][e].e = y.e,
                              s[k - 1][e].b = y.b,
                              s[k - 1][e].n = y.n,
                              s[k - 1][e].t = y.t)
                          }
                          for (y.b = g - z,
                          l >= x ? y.e = 99 : f[l] < u ? (y.e = 256 > f[l] ? 16 : 15,
                          y.n = f[l++]) : (y.e = a[f[l] - u],
                          y.n = b[f[l++] - u]),
                          c = 1 << g - z,
                          e = d >> z; e < w; e += c)
                              B[e].e = y.e,
                              B[e].b = y.b,
                              B[e].n = y.n,
                              B[e].t = y.t;
                          for (e = 1 << g - 1; 0 != (d & e); e >>= 1)
                              d ^= e;
                          for (d ^= e; (d & (1 << z) - 1) != p[k]; )
                              z -= h[k],
                              k--
                      }
                  this.m = h[1],
                  this.status = 0 != v && 1 != m ? 1 : 0
              }
          }
      }, g = function(t) {
          for (; A < t; ) {
              var g = D, f;
              f = J.length == N ? -1 : 255 & J.charCodeAt(N++),
              D = g | f << A,
              A += 8
          }
      }, h = function(f) {
          return D & W[f]
      }, m = function(f) {
          D >>= f,
          A -= f
      }, K = function(t, x, u) {
          var b, a, q;
          if (0 == u)
              return 0;
          for (q = 0; ; ) {
              for (g(s),
              b = (a = w.list[h(s)]).e; 16 < b; ) {
                  if (99 == b)
                      return -1;
                  m(a.b),
                  g(b -= 16),
                  b = (a = a.t[h(b)]).e
              }
              if (m(a.b),
              16 == b)
                  f &= 32767,
                  t[x + q++] = p[f++] = a.n;
              else {
                  if (15 == b)
                      break;
                  for (g(b),
                  l = a.n + h(b),
                  m(b),
                  g(E),
                  b = (a = M.list[h(E)]).e; 16 < b; ) {
                      if (99 == b)
                          return -1;
                      m(a.b),
                      g(b -= 16),
                      b = (a = a.t[h(b)]).e
                  }
                  for (m(a.b),
                  g(b),
                  C = f - a.n - h(b),
                  m(b); 0 < l && q < u; )
                      l--,
                      C &= 32767,
                      f &= 32767,
                      t[x + q++] = p[f++] = p[C++]
              }
              if (q == u)
                  return u
          }
          return v = -1,
          q
      }, X = function(f, l, u) {
          var b, a, q, r, n, c, p, k = Array(316);
          for (b = 0; b < k.length; b++)
              k[b] = 0;
          if (g(5),
          c = 257 + h(5),
          m(5),
          g(5),
          p = 1 + h(5),
          m(5),
          g(4),
          b = 4 + h(4),
          m(4),
          286 < c || 30 < p)
              return -1;
          for (a = 0; a < b; a++)
              g(3),
              k[T[a]] = h(3),
              m(3);
          for (; 19 > a; a++)
              k[T[a]] = 0;
          if (0 != (a = new G(k,19,19,null,null,s = 7)).status)
              return -1;
          for (w = a.root,
          s = a.m,
          r = c + p,
          b = q = 0; b < r; )
              if (g(s),
              a = (n = w.list[h(s)]).b,
              m(a),
              16 > (a = n.n))
                  k[b++] = q = a;
              else if (16 == a) {
                  if (g(2),
                  a = 3 + h(2),
                  m(2),
                  b + a > r)
                      return -1;
                  for (; 0 < a--; )
                      k[b++] = q
              } else {
                  if (17 == a ? (g(3),
                  a = 3 + h(3),
                  m(3)) : (g(7),
                  a = 11 + h(7),
                  m(7)),
                  b + a > r)
                      return -1;
                  for (; 0 < a--; )
                      k[b++] = 0;
                  q = 0
              }
          if (a = new G(k,c,257,P,Q,s = 9),
          0 == s && (a.status = 1),
          0 != a.status)
              return -1;
          for (w = a.root,
          s = a.m,
          b = 0; b < p; b++)
              k[b] = k[b + c];
          return a = new G(k,p,0,R,S,E = 6),
          M = a.root,
          0 == (E = a.m) && 257 < c || 0 != a.status ? -1 : K(f, l, u)
      }, Y = function(t, x, u) {
          var b, a;
          for (b = 0; b < u && (!F || -1 != v); ) {
              if (0 < l) {
                  if (0 != v)
                      for (; 0 < l && b < u; )
                          l--,
                          C &= 32767,
                          f &= 32767,
                          t[x + b++] = p[f++] = p[C++];
                  else {
                      for (; 0 < l && b < u; )
                          l--,
                          f &= 32767,
                          g(8),
                          t[x + b++] = p[f++] = h(8),
                          m(8);
                      0 == l && (v = -1)
                  }
                  if (b == u)
                      break
              }
              if (-1 == v) {
                  if (F)
                      break;
                  g(1),
                  0 != h(1) && (F = !0),
                  m(1),
                  g(2),
                  v = h(2),
                  m(2),
                  w = null,
                  l = 0
              }
              switch (v) {
              case 0:
                  a = t;
                  var q = x + b, r = u - b, n = void 0, n;
                  if (m(n = 7 & A),
                  g(16),
                  n = h(16),
                  m(16),
                  g(16),
                  n != (65535 & ~D))
                      a = -1;
                  else {
                      for (m(16),
                      l = n,
                      n = 0; 0 < l && n < r; )
                          l--,
                          f &= 32767,
                          g(8),
                          a[q + n++] = p[f++] = h(8),
                          m(8);
                      0 == l && (v = -1),
                      a = n
                  }
                  break;
              case 1:
                  if (null != w)
                      a = K(t, x + b, u - b);
                  else
                      a: {
                          if (a = t,
                          q = x + b,
                          r = u - b,
                          null == H) {
                              for (var c = void 0, n = Array(288), c = 0; 144 > c; c++)
                                  n[c] = 8;
                              for (; 256 > c; c++)
                                  n[c] = 9;
                              for (; 280 > c; c++)
                                  n[c] = 7;
                              for (; 288 > c; c++)
                                  n[c] = 8;
                              if (0 != (c = new G(n,288,257,P,Q,I = 7)).status) {
                                  a = -1;
                                  break a
                              }
                              for (H = c.root,
                              I = c.m,
                              c = 0; 30 > c; c++)
                                  n[c] = 5;
                              if (zip_fixed_bd = 5,
                              1 < (c = new G(n,30,0,R,S,zip_fixed_bd)).status) {
                                  H = null,
                                  a = -1;
                                  break a
                              }
                              O = c.root,
                              zip_fixed_bd = c.m
                          }
                          w = H,
                          M = O,
                          s = I,
                          E = zip_fixed_bd,
                          a = K(a, q, r)
                      }
                  break;
              case 2:
                  a = null != w ? K(t, x + b, u - b) : X(t, x + b, u - b);
                  break;
              default:
                  a = -1
              }
              if (-1 == a)
                  return F ? 0 : -1;
              b += a
          }
          return b
      };
      L.C || (L.C = {}),
      L.C.i = function(g) {
          var h;
          null == p && (p = Array(65536)),
          A = D = f = 0,
          v = -1,
          F = !1,
          l = C = 0,
          w = null,
          J = g,
          N = 0;
          for (var m = Array(1024), b = []; 0 < (g = Y(m, 0, m.length)); ) {
              var a = Array(g);
              for (h = 0; h < g; h++)
                  a[h] = String.fromCharCode(m[h]);
              b[b.length] = a.join("")
          }
          return J = null,
          b.join("")
      }
  }(this),
  function(oa) {
      var Q, m, ea, pa, R = null, u, n, fa, f, qa, ra, A, B, w, C, D, P, Ca, S, l, x, g, W, H, k, Da, sa, T, Ea, E, I, J, U, s, y, z, K, t, q, L, X, F, $, V, ta, ga, ha, M, ia, ua, Y, aa, N, Z, ja, va, ba = function() {
          this.dl = this.fc = 0
      }, wa = function() {
          this.extra_bits = this.static_tree = this.dyn_tree = null,
          this.max_code = this.max_length = this.elems = this.extra_base = 0
      }, G = function(c, e, b, a) {
          this.good_length = c,
          this.max_lazy = e,
          this.nice_length = b,
          this.max_chain = a
      }, Sa = function() {
          this.next = null,
          this.len = 0,
          this.ptr = Array(8192),
          this.off = 0
      }, xa = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0], ca = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13], Ta = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7], Fa = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], ya = [new G(0,0,0,0), new G(4,4,8,4), new G(4,5,16,8), new G(4,6,32,32), new G(4,4,16,16), new G(8,16,32,32), new G(8,16,128,128), new G(8,32,128,256), new G(32,128,258,1024), new G(32,258,258,4096)], ka = function(c) {
          if (R[n + u++] = c,
          8192 == n + u && 0 != u) {
              var e;
              for (null != Q ? (c = Q,
              Q = Q.next) : c = new Sa,
              c.next = null,
              c.len = c.off = 0,
              null == m ? m = ea = c : ea = ea.next = c,
              c.len = u - n,
              e = 0; e < c.len; e++)
                  c.ptr[e] = R[n + e];
              u = n = 0
          }
      }, la = function(c) {
          c &= 65535,
          8190 > n + u ? (R[n + u++] = 255 & c,
          R[n + u++] = c >>> 8) : (ka(255 & c),
          ka(c >>> 8))
      }, ma = function() {
          D = 8191 & (D << 5 ^ 255 & f[g + 3 - 1]),
          P = A[32768 + D],
          A[32767 & g] = P,
          A[32768 + D] = g
      }, O = function(c, e) {
          v(e[c].fc, e[c].dl)
      }, Ga = function(c, e, b) {
          return c[e].fc < c[b].fc || c[e].fc == c[b].fc && F[e] <= F[b]
      }, Ha = function(c, e, b) {
          var a;
          for (a = 0; a < b && va < ja.length; a++)
              c[e + a] = 255 & ja.charCodeAt(va++);
          return a
      }, Ja = function(c) {
          var e = Da, b = g, a, d = x, h = 32506 < g ? g - 32506 : 0, r = g + 258, Ia = f[b + d - 1], k = f[b + d];
          x >= Ea && (e >>= 2);
          do {
              if (f[(a = c) + d] == k && f[a + d - 1] == Ia && f[a] == f[b] && f[++a] == f[b + 1]) {
                  b += 2,
                  a++;
                  do {} while (f[++b] == f[++a] && f[++b] == f[++a] && f[++b] == f[++a] && f[++b] == f[++a] && f[++b] == f[++a] && f[++b] == f[++a] && f[++b] == f[++a] && f[++b] == f[++a] && b < r);
                  if (a = 258 - (r - b),
                  b = r - 258,
                  a > d) {
                      if (W = c,
                      d = a,
                      258 <= a)
                          break;
                      Ia = f[b + d - 1],
                      k = f[b + d]
                  }
              }
          } while ((c = A[32767 & c]) > h && 0 != --e);
          return d
      }, za = function() {
          var c, e, b = 65536 - k - g;
          if (-1 == b)
              b--;
          else if (65274 <= g) {
              for (c = 0; 32768 > c; c++)
                  f[c] = f[c + 32768];
              for (W -= 32768,
              g -= 32768,
              C -= 32768,
              c = 0; 8192 > c; c++)
                  e = A[32768 + c],
                  A[32768 + c] = 32768 <= e ? e - 32768 : 0;
              for (c = 0; 32768 > c; c++)
                  e = A[c],
                  A[c] = 32768 <= e ? e - 32768 : 0;
              b += 32768
          }
          H || (0 >= (c = Ha(f, g + k, b)) ? H = !0 : k += c)
      }, Ua = function(c, e, b) {
          var a;
          if (!pa) {
              if (!H) {
                  var d, h;
                  if (w = B = 0,
                  0 == U[0].dl) {
                      for (y.dyn_tree = E,
                      y.static_tree = J,
                      y.extra_bits = xa,
                      y.extra_base = 257,
                      y.elems = 286,
                      y.max_length = 15,
                      y.max_code = 0,
                      z.dyn_tree = I,
                      z.static_tree = U,
                      z.extra_bits = ca,
                      z.extra_base = 0,
                      z.elems = 30,
                      z.max_length = 15,
                      z.max_code = 0,
                      K.dyn_tree = s,
                      K.static_tree = null,
                      K.extra_bits = Ta,
                      K.extra_base = 0,
                      K.elems = 19,
                      K.max_length = 7,
                      h = d = K.max_code = 0; 28 > h; h++)
                          for (ta[h] = d,
                          a = 0; a < 1 << xa[h]; a++)
                              $[d++] = h;
                      for ($[d - 1] = h,
                      h = d = 0; 16 > h; h++)
                          for (ga[h] = d,
                          a = 0; a < 1 << ca[h]; a++)
                              V[d++] = h;
                      for (d >>= 7; 30 > h; h++)
                          for (ga[h] = d << 7,
                          a = 0; a < 1 << ca[h] - 7; a++)
                              V[256 + d++] = h;
                      for (a = 0; 15 >= a; a++)
                          t[a] = 0;
                      for (a = 0; 143 >= a; )
                          J[a++].dl = 8,
                          t[8]++;
                      for (; 255 >= a; )
                          J[a++].dl = 9,
                          t[9]++;
                      for (; 279 >= a; )
                          J[a++].dl = 7,
                          t[7]++;
                      for (; 287 >= a; )
                          J[a++].dl = 8,
                          t[8]++;
                      for (Ka(J, 287),
                      a = 0; 30 > a; a++)
                          U[a].dl = 5,
                          U[a].fc = La(a, 5);
                      Ma()
                  }
                  for (a = 0; 8192 > a; a++)
                      A[32768 + a] = 0;
                  if (sa = ya[T].max_lazy,
                  Ea = ya[T].good_length,
                  Da = ya[T].max_chain,
                  C = g = 0,
                  0 >= (k = Ha(f, 0, 65536)))
                      H = !0,
                      k = 0;
                  else {
                      for (H = !1; 262 > k && !H; )
                          za();
                      for (a = D = 0; 2 > a; a++)
                          D = 8191 & (D << 5 ^ 255 & f[a])
                  }
                  m = null,
                  S = n = u = 0,
                  3 >= T ? (x = 2,
                  l = 0) : (l = 2,
                  S = S = 0),
                  fa = !1
              }
              if (pa = !0,
              0 == k)
                  return fa = !0,
                  0
          }
          if ((a = Na(c, e, b)) == b)
              return b;
          if (fa)
              return a;
          if (3 >= T)
              for (; 0 != k && null == m; ) {
                  if (ma(),
                  0 != P && 32506 >= g - P && ((l = Ja(P)) > k && (l = k)),
                  3 <= l)
                      if (h = da(g - W, l - 3),
                      k -= l,
                      l <= sa) {
                          l--;
                          do {
                              g++,
                              ma()
                          } while (0 != --l);
                          g++
                      } else
                          g += l,
                          l = 0,
                          D = 8191 & ((D = 255 & f[g]) << 5 ^ 255 & f[g + 1]);
                  else
                      h = da(0, 255 & f[g]),
                      k--,
                      g++;
                  for (h && (na(0),
                  C = g); 262 > k && !H; )
                      za()
              }
          else
              for (; 0 != k && null == m; ) {
                  if (ma(),
                  x = l,
                  Ca = W,
                  l = 2,
                  0 != P && x < sa && 32506 >= g - P && ((l = Ja(P)) > k && (l = k),
                  3 == l && 4096 < g - W && l--),
                  3 <= x && l <= x) {
                      h = da(g - 1 - Ca, x - 3),
                      k -= x - 1,
                      x -= 2;
                      do {
                          g++,
                          ma()
                      } while (0 != --x);
                      S = 0,
                      l = 2,
                      g++,
                      h && (na(0),
                      C = g)
                  } else
                      0 != S ? da(0, 255 & f[g - 1]) && (na(0),
                      C = g) : S = 1,
                      g++,
                      k--;
                  for (; 262 > k && !H; )
                      za()
              }
          return 0 == k && (0 != S && da(0, 255 & f[g - 1]),
          na(1),
          fa = !0),
          a + Na(c, a + e, b - a)
      }, Na = function(c, e, b) {
          var a, d, h;
          for (a = 0; null != m && a < b; ) {
              for ((d = b - a) > m.len && (d = m.len),
              h = 0; h < d; h++)
                  c[e + a + h] = m.ptr[m.off + h];
              m.off += d,
              m.len -= d,
              a += d,
              0 == m.len && (d = m,
              m = m.next,
              d.next = Q,
              Q = d)
          }
          if (a == b)
              return a;
          if (n < u) {
              for ((d = b - a) > u - n && (d = u - n),
              h = 0; h < d; h++)
                  c[e + a + h] = R[n + h];
              a += d,
              u == (n += d) && (u = n = 0)
          }
          return a
      }, Ma = function() {
          var c;
          for (c = 0; 286 > c; c++)
              E[c].fc = 0;
          for (c = 0; 30 > c; c++)
              I[c].fc = 0;
          for (c = 0; 19 > c; c++)
              s[c].fc = 0;
          E[256].fc = 1,
          Y = M = ia = ua = N = Z = 0,
          aa = 1
      }, Aa = function(c, e) {
          for (var b = q[e], a = e << 1; a <= L && (a < L && Ga(c, q[a + 1], q[a]) && a++,
          !Ga(c, b, q[a])); )
              q[e] = q[a],
              e = a,
              a <<= 1;
          q[e] = b
      }, Ka = function(c, e) {
          var b = Array(16), a = 0, d;
          for (d = 1; 15 >= d; d++)
              a = a + t[d - 1] << 1,
              b[d] = a;
          for (a = 0; a <= e; a++)
              0 != (d = c[a].dl) && (c[a].fc = La(b[d]++, d))
      }, Ba = function(c) {
          var e = c.dyn_tree, b = c.static_tree, a, d, h = -1, r = a = c.elems;
          for (L = 0,
          X = 573,
          d = 0; d < a; d++)
              0 != e[d].fc ? (q[++L] = h = d,
              F[d] = 0) : e[d].dl = 0;
          for (; 2 > L; )
              e[d = q[++L] = 2 > h ? ++h : 0].fc = 1,
              F[d] = 0,
              N--,
              null != b && (Z -= b[d].dl);
          for (c.max_code = h,
          d = L >> 1; 1 <= d; d--)
              Aa(e, d);
          do {
              d = q[1],
              q[1] = q[L--],
              Aa(e, 1),
              b = q[1],
              q[--X] = d,
              q[--X] = b,
              e[r].fc = e[d].fc + e[b].fc,
              F[r] = F[d] > F[b] + 1 ? F[d] : F[b] + 1,
              e[d].dl = e[b].dl = r,
              q[1] = r++,
              Aa(e, 1)
          } while (2 <= L);
          q[--X] = q[1],
          r = c.dyn_tree,
          d = c.extra_bits;
          var a = c.extra_base, b = c.max_code, f = c.max_length, g = c.static_tree, k, p, l, m, n = 0;
          for (p = 0; 15 >= p; p++)
              t[p] = 0;
          for (r[q[X]].dl = 0,
          c = X + 1; 573 > c; c++)
              (p = r[r[k = q[c]].dl].dl + 1) > f && (p = f,
              n++),
              r[k].dl = p,
              k > b || (t[p]++,
              l = 0,
              k >= a && (l = d[k - a]),
              m = r[k].fc,
              N += m * (p + l),
              null != g && (Z += m * (g[k].dl + l)));
          if (0 != n) {
              do {
                  for (p = f - 1; 0 == t[p]; )
                      p--;
                  t[p]--,
                  t[p + 1] += 2,
                  t[f]--,
                  n -= 2
              } while (0 < n);
              for (p = f; 0 != p; p--)
                  for (k = t[p]; 0 != k; )
                      (d = q[--c]) > b || (r[d].dl != p && (N += (p - r[d].dl) * r[d].fc,
                      r[d].fc = p),
                      k--)
          }
          Ka(e, h)
      }, Oa = function(c, e) {
          var b, a = -1, d, h = c[0].dl, f = 0, g = 7, k = 4;
          for (0 == h && (g = 138,
          k = 3),
          c[e + 1].dl = 65535,
          b = 0; b <= e; b++)
              d = h,
              h = c[b + 1].dl,
              ++f < g && d == h || (f < k ? s[d].fc += f : 0 != d ? (d != a && s[d].fc++,
              s[16].fc++) : 10 >= f ? s[17].fc++ : s[18].fc++,
              f = 0,
              a = d,
              0 == h ? (g = 138,
              k = 3) : d == h ? (g = 6,
              k = 3) : (g = 7,
              k = 4))
      }, Pa = function(c, e) {
          var b, a = -1, d, h = c[0].dl, f = 0, g = 7, k = 4;
          for (0 == h && (g = 138,
          k = 3),
          b = 0; b <= e; b++)
              if (d = h,
              h = c[b + 1].dl,
              !(++f < g && d == h)) {
                  if (f < k)
                      do {
                          O(d, s)
                      } while (0 != --f);
                  else
                      0 != d ? (d != a && (O(d, s),
                      f--),
                      O(16, s),
                      v(f - 3, 2)) : 10 >= f ? (O(17, s),
                      v(f - 3, 3)) : (O(18, s),
                      v(f - 11, 7));
                  f = 0,
                  a = d,
                  0 == h ? (g = 138,
                  k = 3) : d == h ? (g = 6,
                  k = 3) : (g = 7,
                  k = 4)
              }
      }, na = function(c) {
          var e, b, a, d;
          for (d = g - C,
          ha[ua] = Y,
          Ba(y),
          Ba(z),
          Oa(E, y.max_code),
          Oa(I, z.max_code),
          Ba(K),
          a = 18; 3 <= a && 0 == s[Fa[a]].dl; a--)
              ;
          if ((b = Z + 3 + 7 >> 3) <= (e = (N += 3 * (a + 1) + 14) + 3 + 7 >> 3) && (e = b),
          d + 4 <= e && 0 <= C)
              for (v(0 + c, 3),
              Qa(),
              la(d),
              la(~d),
              a = 0; a < d; a++)
                  ka(f[C + a]);
          else if (b == e)
              v(2 + c, 3),
              Ra(J, U);
          else {
              for (v(4 + c, 3),
              d = y.max_code + 1,
              e = z.max_code + 1,
              a += 1,
              v(d - 257, 5),
              v(e - 1, 5),
              v(a - 4, 4),
              b = 0; b < a; b++)
                  v(s[Fa[b]].dl, 3);
              Pa(E, d - 1),
              Pa(I, e - 1),
              Ra(E, I)
          }
          Ma(),
          0 != c && Qa()
      }, da = function(c, e) {
          if (ra[M++] = e,
          0 == c ? E[e].fc++ : (c--,
          E[$[e] + 256 + 1].fc++,
          I[255 & (256 > c ? V[c] : V[256 + (c >> 7)])].fc++,
          qa[ia++] = c,
          Y |= aa),
          aa <<= 1,
          0 == (7 & M) && (ha[ua++] = Y,
          Y = 0,
          aa = 1),
          2 < T && 0 == (4095 & M)) {
              var b = 8 * M, a = g - C, d;
              for (d = 0; 30 > d; d++)
                  b += I[d].fc * (5 + ca[d]);
              if (b >>= 3,
              ia < parseInt(M / 2) && b < parseInt(a / 2))
                  return !0
          }
          return 8191 == M || 8192 == ia
      }, Ra = function(c, e) {
          var b, a = 0, d = 0, h = 0, f = 0, g, k;
          if (0 != M)
              do {
                  0 == (7 & a) && (f = ha[h++]),
                  b = 255 & ra[a++],
                  0 == (1 & f) ? O(b, c) : (g = $[b],
                  O(g + 256 + 1, c),
                  0 != (k = xa[g]) && (b -= ta[g],
                  v(b, k)),
                  g = 255 & (256 > (b = qa[d++]) ? V[b] : V[256 + (b >> 7)]),
                  O(g, e),
                  0 != (k = ca[g]) && (b -= ga[g],
                  v(b, k))),
                  f >>= 1
              } while (a < M);
          O(256, c)
      }, v = function(c, e) {
          w > 16 - e ? (la(B |= c << w),
          B = c >> 16 - w,
          w += e - 16) : (B |= c << w,
          w += e)
      }, La = function(c, e) {
          var b = 0;
          do {
              b |= 1 & c,
              c >>= 1,
              b <<= 1
          } while (0 < --e);
          return b >> 1
      }, Qa = function() {
          8 < w ? la(B) : 0 < w && ka(B),
          w = B = 0
      };
      oa.C || (oa.C = {}),
      oa.C.d = function(c, e) {
          var b, a;
          if (ja = c,
          va = 0,
          void 0 === e && (e = 6),
          (b = e) ? 1 > b ? b = 1 : 9 < b && (b = 9) : b = 6,
          T = b,
          H = pa = !1,
          null == R) {
              for (Q = m = ea = null,
              R = Array(8192),
              f = Array(65536),
              qa = Array(8192),
              ra = Array(32832),
              A = Array(65536),
              E = Array(573),
              b = 0; 573 > b; b++)
                  E[b] = new ba;
              for (I = Array(61),
              b = 0; 61 > b; b++)
                  I[b] = new ba;
              for (J = Array(288),
              b = 0; 288 > b; b++)
                  J[b] = new ba;
              for (U = Array(30),
              b = 0; 30 > b; b++)
                  U[b] = new ba;
              for (s = Array(39),
              b = 0; 39 > b; b++)
                  s[b] = new ba;
              y = new wa,
              z = new wa,
              K = new wa,
              t = Array(16),
              q = Array(573),
              F = Array(573),
              $ = Array(256),
              V = Array(512),
              ta = Array(29),
              ga = Array(30),
              ha = Array(1024)
          }
          for (var d = Array(1024), h = []; 0 < (b = Ua(d, 0, d.length)); ) {
              var g = Array(b);
              for (a = 0; a < b; a++)
                  g[a] = String.fromCharCode(d[a]);
              h[h.length] = g.join("")
          }
          return ja = null,
          h.join("")
      }
  }(this),
  TSUCHINOKO.compress = function(v) {
      return encodeURIComponent(btoa(C.d(encodeURIComponent(v))))
  }
  ,
  TSUCHINOKO.expand = function(v) {
      return decodeURIComponent(C.i(atob(decodeURIComponent(v))))
  }
  ,
  TSUCHINOKO.createURL = function(v) {
      let b = (window.location.origin + window.location.pathname).replace(/\\/g, "/").replace(/\/[^\/]*$/, "/")
        , q = this.compress(v)
        , f = (window.location.origin + window.location.pathname).split("/").pop();
      return f = "index.html" == f ? "" : f,
      b + (q.length > 0 ? f + "?code=" : "") + q
  }
  ,
  CORE = TSUCHINOKO.expand(CORE),
  TSUCHINOKO.createWorker = function() {
      return new Worker(window.URL.createObjectURL(new Blob([CORE],{
          type: "text/javascript"
      })))
  }
}
)(this);
