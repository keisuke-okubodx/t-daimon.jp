!function() {
  var r;
  (r = jQuery).fn.qrcode = function(h) {
      var s;
      function u(a) {
          this.mode = s,
          this.data = a
      }
      function o(a, c) {
          this.typeNumber = a,
          this.errorCorrectLevel = c,
          this.modules = null,
          this.moduleCount = 0,
          this.dataCache = null,
          this.dataList = []
      }
      function q(a, c) {
          if (null == a.length)
              throw Error(a.length + "/" + c);
          for (var d = 0; d < a.length && 0 == a[d]; )
              d++;
          this.num = Array(a.length - d + c);
          for (var b = 0; b < a.length - d; b++)
              this.num[b] = a[b + d]
      }
      function p(a, c) {
          this.totalCount = a,
          this.dataCount = c
      }
      function t() {
          this.buffer = [],
          this.length = 0
      }
      u.prototype = {
          getLength: function() {
              return this.data.length
          },
          write: function(a) {
              for (var c = 0; c < this.data.length; c++)
                  a.put(this.data.charCodeAt(c), 8)
          }
      },
      o.prototype = {
          addData: function(a) {
              this.dataList.push(new u(a)),
              this.dataCache = null
          },
          isDark: function(a, c) {
              if (0 > a || this.moduleCount <= a || 0 > c || this.moduleCount <= c)
                  throw Error(a + "," + c);
              return this.modules[a][c]
          },
          getModuleCount: function() {
              return this.moduleCount
          },
          make: function() {
              if (1 > this.typeNumber) {
                  for (var a = 1, a = 1; 40 > a; a++) {
                      for (var c = p.getRSBlocks(a, this.errorCorrectLevel), d = new t, b = 0, e = 0; e < c.length; e++)
                          b += c[e].dataCount;
                      for (e = 0; e < this.dataList.length; e++)
                          c = this.dataList[e],
                          d.put(c.mode, 4),
                          d.put(c.getLength(), j.getLengthInBits(c.mode, a)),
                          c.write(d);
                      if (d.getLengthInBits() <= 8 * b)
                          break
                  }
                  this.typeNumber = a
              }
              this.makeImpl(!1, this.getBestMaskPattern())
          },
          makeImpl: function(a, c) {
              this.moduleCount = 4 * this.typeNumber + 17,
              this.modules = Array(this.moduleCount);
              for (var d = 0; d < this.moduleCount; d++) {
                  this.modules[d] = Array(this.moduleCount);
                  for (var b = 0; b < this.moduleCount; b++)
                      this.modules[d][b] = null
              }
              this.setupPositionProbePattern(0, 0),
              this.setupPositionProbePattern(this.moduleCount - 7, 0),
              this.setupPositionProbePattern(0, this.moduleCount - 7),
              this.setupPositionAdjustPattern(),
              this.setupTimingPattern(),
              this.setupTypeInfo(a, c),
              7 <= this.typeNumber && this.setupTypeNumber(a),
              null == this.dataCache && (this.dataCache = o.createData(this.typeNumber, this.errorCorrectLevel, this.dataList)),
              this.mapData(this.dataCache, c)
          },
          setupPositionProbePattern: function(a, c) {
              for (var d = -1; 7 >= d; d++)
                  if (!(-1 >= a + d || this.moduleCount <= a + d))
                      for (var b = -1; 7 >= b; b++)
                          -1 >= c + b || this.moduleCount <= c + b || (this.modules[a + d][c + b] = 0 <= d && 6 >= d && (0 == b || 6 == b) || 0 <= b && 6 >= b && (0 == d || 6 == d) || 2 <= d && 4 >= d && 2 <= b && 4 >= b)
          },
          getBestMaskPattern: function() {
              for (var a = 0, c = 0, d = 0; 8 > d; d++) {
                  this.makeImpl(!0, d);
                  var b = j.getLostPoint(this);
                  (0 == d || a > b) && (a = b,
                  c = d)
              }
              return c
          },
          createMovieClip: function(a, c, d) {
              for (a = a.createEmptyMovieClip(c, d),
              this.make(),
              c = 0; c < this.modules.length; c++)
                  for (var d = 1 * c, b = 0; b < this.modules[c].length; b++) {
                      var e = 1 * b;
                      this.modules[c][b] && (a.beginFill(0, 100),
                      a.moveTo(e, d),
                      a.lineTo(e + 1, d),
                      a.lineTo(e + 1, d + 1),
                      a.lineTo(e, d + 1),
                      a.endFill())
                  }
              return a
          },
          setupTimingPattern: function() {
              for (var a = 8; a < this.moduleCount - 8; a++)
                  null == this.modules[a][6] && (this.modules[a][6] = 0 == a % 2);
              for (a = 8; a < this.moduleCount - 8; a++)
                  null == this.modules[6][a] && (this.modules[6][a] = 0 == a % 2)
          },
          setupPositionAdjustPattern: function() {
              for (var a = j.getPatternPosition(this.typeNumber), c = 0; c < a.length; c++)
                  for (var d = 0; d < a.length; d++) {
                      var b = a[c]
                        , e = a[d];
                      if (null == this.modules[b][e])
                          for (var f = -2; 2 >= f; f++)
                              for (var i = -2; 2 >= i; i++)
                                  this.modules[b + f][e + i] = -2 == f || 2 == f || -2 == i || 2 == i || 0 == f && 0 == i
                  }
          },
          setupTypeNumber: function(a) {
              for (var c = j.getBCHTypeNumber(this.typeNumber), d = 0; 18 > d; d++) {
                  var b = !a && 1 == (c >> d & 1);
                  this.modules[Math.floor(d / 3)][d % 3 + this.moduleCount - 8 - 3] = b
              }
              for (d = 0; 18 > d; d++)
                  b = !a && 1 == (c >> d & 1),
                  this.modules[d % 3 + this.moduleCount - 8 - 3][Math.floor(d / 3)] = b
          },
          setupTypeInfo: function(a, c) {
              for (var d = j.getBCHTypeInfo(this.errorCorrectLevel << 3 | c), b = 0; 15 > b; b++) {
                  var e = !a && 1 == (d >> b & 1);
                  6 > b ? this.modules[b][8] = e : 8 > b ? this.modules[b + 1][8] = e : this.modules[this.moduleCount - 15 + b][8] = e
              }
              for (b = 0; 15 > b; b++)
                  e = !a && 1 == (d >> b & 1),
                  8 > b ? this.modules[8][this.moduleCount - b - 1] = e : 9 > b ? this.modules[8][15 - b - 1 + 1] = e : this.modules[8][15 - b - 1] = e;
              this.modules[this.moduleCount - 8][8] = !a
          },
          mapData: function(a, c) {
              for (var d = -1, b = this.moduleCount - 1, e = 7, f = 0, i = this.moduleCount - 1; 0 < i; i -= 2)
                  for (6 == i && i--; ; ) {
                      for (var g = 0; 2 > g; g++)
                          if (null == this.modules[b][i - g]) {
                              var n = !1;
                              f < a.length && (n = 1 == (a[f] >>> e & 1)),
                              j.getMask(c, b, i - g) && (n = !n),
                              this.modules[b][i - g] = n,
                              -1 == --e && (f++,
                              e = 7)
                          }
                      if (0 > (b += d) || this.moduleCount <= b) {
                          b -= d,
                          d = -d;
                          break
                      }
                  }
          }
      },
      o.PAD0 = 236,
      o.PAD1 = 17,
      o.createData = function(a, c, d) {
          for (var c = p.getRSBlocks(a, c), b = new t, e = 0; e < d.length; e++) {
              var f = d[e];
              b.put(f.mode, 4),
              b.put(f.getLength(), j.getLengthInBits(f.mode, a)),
              f.write(b)
          }
          for (e = a = 0; e < c.length; e++)
              a += c[e].dataCount;
          if (b.getLengthInBits() > 8 * a)
              throw Error("code length overflow. (" + b.getLengthInBits() + ">" + 8 * a + ")");
          for (b.getLengthInBits() + 4 <= 8 * a && b.put(0, 4); 0 != b.getLengthInBits() % 8; )
              b.putBit(!1);
          for (; !(b.getLengthInBits() >= 8 * a || (b.put(o.PAD0, 8),
          b.getLengthInBits() >= 8 * a)); )
              b.put(o.PAD1, 8);
          return o.createBytes(b, c)
      }
      ,
      o.createBytes = function(a, c) {
          for (var d = 0, b = 0, e = 0, f = Array(c.length), i = Array(c.length), g = 0; g < c.length; g++) {
              var n = c[g].dataCount
                , h = c[g].totalCount - n
                , b = Math.max(b, n)
                , e = Math.max(e, h);
              f[g] = Array(n);
              for (var k = 0; k < f[g].length; k++)
                  f[g][k] = 255 & a.buffer[k + d];
              for (d += n,
              k = j.getErrorCorrectPolynomial(h),
              n = new q(f[g],k.getLength() - 1).mod(k),
              i[g] = Array(k.getLength() - 1),
              k = 0; k < i[g].length; k++)
                  h = k + n.getLength() - i[g].length,
                  i[g][k] = 0 <= h ? n.get(h) : 0
          }
          for (k = g = 0; k < c.length; k++)
              g += c[k].totalCount;
          for (d = Array(g),
          k = n = 0; k < b; k++)
              for (g = 0; g < c.length; g++)
                  k < f[g].length && (d[n++] = f[g][k]);
          for (k = 0; k < e; k++)
              for (g = 0; g < c.length; g++)
                  k < i[g].length && (d[n++] = i[g][k]);
          return d
      }
      ,
      s = 4;
      for (var j = {
          PATTERN_POSITION_TABLE: [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]],
          G15: 1335,
          G18: 7973,
          G15_MASK: 21522,
          getBCHTypeInfo: function(a) {
              for (var c = a << 10; 0 <= j.getBCHDigit(c) - j.getBCHDigit(j.G15); )
                  c ^= j.G15 << j.getBCHDigit(c) - j.getBCHDigit(j.G15);
              return (a << 10 | c) ^ j.G15_MASK
          },
          getBCHTypeNumber: function(a) {
              for (var c = a << 12; 0 <= j.getBCHDigit(c) - j.getBCHDigit(j.G18); )
                  c ^= j.G18 << j.getBCHDigit(c) - j.getBCHDigit(j.G18);
              return a << 12 | c
          },
          getBCHDigit: function(a) {
              for (var c = 0; 0 != a; )
                  c++,
                  a >>>= 1;
              return c
          },
          getPatternPosition: function(a) {
              return j.PATTERN_POSITION_TABLE[a - 1]
          },
          getMask: function(a, c, d) {
              switch (a) {
              case 0:
                  return 0 == (c + d) % 2;
              case 1:
                  return 0 == c % 2;
              case 2:
                  return 0 == d % 3;
              case 3:
                  return 0 == (c + d) % 3;
              case 4:
                  return 0 == (Math.floor(c / 2) + Math.floor(d / 3)) % 2;
              case 5:
                  return 0 == c * d % 2 + c * d % 3;
              case 6:
                  return 0 == (c * d % 2 + c * d % 3) % 2;
              case 7:
                  return 0 == (c * d % 3 + (c + d) % 2) % 2;
              default:
                  throw Error("bad maskPattern:" + a)
              }
          },
          getErrorCorrectPolynomial: function(a) {
              for (var c = new q([1],0), d = 0; d < a; d++)
                  c = c.multiply(new q([1, l.gexp(d)],0));
              return c
          },
          getLengthInBits: function(a, c) {
              if (1 <= c && 10 > c)
                  switch (a) {
                  case 1:
                      return 10;
                  case 2:
                      return 9;
                  case s:
                  case 8:
                      return 8;
                  default:
                      throw Error("mode:" + a)
                  }
              else if (27 > c)
                  switch (a) {
                  case 1:
                      return 12;
                  case 2:
                      return 11;
                  case s:
                      return 16;
                  case 8:
                      return 10;
                  default:
                      throw Error("mode:" + a)
                  }
              else {
                  if (!(41 > c))
                      throw Error("type:" + c);
                  switch (a) {
                  case 1:
                      return 14;
                  case 2:
                      return 13;
                  case s:
                      return 16;
                  case 8:
                      return 12;
                  default:
                      throw Error("mode:" + a)
                  }
              }
          },
          getLostPoint: function(a) {
              for (var c = a.getModuleCount(), d = 0, b = 0; b < c; b++)
                  for (var e = 0; e < c; e++) {
                      for (var f = 0, i = a.isDark(b, e), g = -1; 1 >= g; g++)
                          if (!(0 > b + g || c <= b + g))
                              for (var h = -1; 1 >= h; h++)
                                  0 > e + h || c <= e + h || 0 == g && 0 == h || i == a.isDark(b + g, e + h) && f++;
                      5 < f && (d += 3 + f - 5)
                  }
              for (b = 0; b < c - 1; b++)
                  for (e = 0; e < c - 1; e++)
                      f = 0,
                      a.isDark(b, e) && f++,
                      a.isDark(b + 1, e) && f++,
                      a.isDark(b, e + 1) && f++,
                      a.isDark(b + 1, e + 1) && f++,
                      (0 == f || 4 == f) && (d += 3);
              for (b = 0; b < c; b++)
                  for (e = 0; e < c - 6; e++)
                      a.isDark(b, e) && !a.isDark(b, e + 1) && a.isDark(b, e + 2) && a.isDark(b, e + 3) && a.isDark(b, e + 4) && !a.isDark(b, e + 5) && a.isDark(b, e + 6) && (d += 40);
              for (e = 0; e < c; e++)
                  for (b = 0; b < c - 6; b++)
                      a.isDark(b, e) && !a.isDark(b + 1, e) && a.isDark(b + 2, e) && a.isDark(b + 3, e) && a.isDark(b + 4, e) && !a.isDark(b + 5, e) && a.isDark(b + 6, e) && (d += 40);
              for (e = f = 0; e < c; e++)
                  for (b = 0; b < c; b++)
                      a.isDark(b, e) && f++;
              return d + 10 * (a = Math.abs(100 * f / c / c - 50) / 5)
          }
      }, l = {
          glog: function(a) {
              if (1 > a)
                  throw Error("glog(" + a + ")");
              return l.LOG_TABLE[a]
          },
          gexp: function(a) {
              for (; 0 > a; )
                  a += 255;
              for (; 256 <= a; )
                  a -= 255;
              return l.EXP_TABLE[a]
          },
          EXP_TABLE: Array(256),
          LOG_TABLE: Array(256)
      }, m = 0; 8 > m; m++)
          l.EXP_TABLE[m] = 1 << m;
      for (m = 8; 256 > m; m++)
          l.EXP_TABLE[m] = l.EXP_TABLE[m - 4] ^ l.EXP_TABLE[m - 5] ^ l.EXP_TABLE[m - 6] ^ l.EXP_TABLE[m - 8];
      for (m = 0; 255 > m; m++)
          l.LOG_TABLE[l.EXP_TABLE[m]] = m;
      return q.prototype = {
          get: function(a) {
              return this.num[a]
          },
          getLength: function() {
              return this.num.length
          },
          multiply: function(a) {
              for (var c = Array(this.getLength() + a.getLength() - 1), d = 0; d < this.getLength(); d++)
                  for (var b = 0; b < a.getLength(); b++)
                      c[d + b] ^= l.gexp(l.glog(this.get(d)) + l.glog(a.get(b)));
              return new q(c,0)
          },
          mod: function(a) {
              if (0 > this.getLength() - a.getLength())
                  return this;
              for (var c = l.glog(this.get(0)) - l.glog(a.get(0)), d = Array(this.getLength()), b = 0; b < this.getLength(); b++)
                  d[b] = this.get(b);
              for (b = 0; b < a.getLength(); b++)
                  d[b] ^= l.gexp(l.glog(a.get(b)) + c);
              return new q(d,0).mod(a)
          }
      },
      p.RS_BLOCK_TABLE = [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12], [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]],
      p.getRSBlocks = function(a, c) {
          var d = p.getRsBlockTable(a, c);
          if (null == d)
              throw Error("bad rs block @ typeNumber:" + a + "/errorCorrectLevel:" + c);
          for (var b = d.length / 3, e = [], f = 0; f < b; f++)
              for (var h = d[3 * f + 0], g = d[3 * f + 1], j = d[3 * f + 2], l = 0; l < h; l++)
                  e.push(new p(g,j));
          return e
      }
      ,
      p.getRsBlockTable = function(a, c) {
          switch (c) {
          case 1:
              return p.RS_BLOCK_TABLE[4 * (a - 1) + 0];
          case 0:
              return p.RS_BLOCK_TABLE[4 * (a - 1) + 1];
          case 3:
              return p.RS_BLOCK_TABLE[4 * (a - 1) + 2];
          case 2:
              return p.RS_BLOCK_TABLE[4 * (a - 1) + 3]
          }
      }
      ,
      t.prototype = {
          get: function(a) {
              return 1 == (this.buffer[Math.floor(a / 8)] >>> 7 - a % 8 & 1)
          },
          put: function(a, c) {
              for (var d = 0; d < c; d++)
                  this.putBit(1 == (a >>> c - d - 1 & 1))
          },
          getLengthInBits: function() {
              return this.length
          },
          putBit: function(a) {
              var c = Math.floor(this.length / 8);
              this.buffer.length <= c && this.buffer.push(0),
              a && (this.buffer[c] |= 128 >>> this.length % 8),
              this.length++
          }
      },
      "string" == typeof h && (h = {
          text: h
      }),
      h = r.extend({}, {
          render: "canvas",
          width: 256,
          height: 256,
          typeNumber: -1,
          correctLevel: 2,
          background: "#ffffff",
          foreground: "#000000"
      }, h),
      this.each((function() {
          var a;
          if ("canvas" == h.render) {
              (a = new o(h.typeNumber,h.correctLevel)).addData(h.text),
              a.make();
              var c = document.createElement("canvas");
              c.id = h.id,
              c.width = h.width,
              c.height = h.height;
              for (var d = c.getContext("2d"), b = h.width / a.getModuleCount(), e = h.height / a.getModuleCount(), f = 0; f < a.getModuleCount(); f++)
                  for (var i = 0; i < a.getModuleCount(); i++) {
                      d.fillStyle = a.isDark(f, i) ? h.foreground : h.background;
                      var g = Math.ceil((i + 1) * b) - Math.floor(i * b)
                        , j = Math.ceil((f + 1) * b) - Math.floor(f * b);
                      d.fillRect(Math.round(i * b), Math.round(f * e), g, j)
                  }
          } else
              for ((a = new o(h.typeNumber,h.correctLevel)).addData(h.text),
              a.make(),
              c = r("<table></table>").css("width", h.width + "px").css("height", h.height + "px").css("border", "0px").css("border-collapse", "collapse").css("background-color", h.background),
              d = h.width / a.getModuleCount(),
              b = h.height / a.getModuleCount(),
              e = 0; e < a.getModuleCount(); e++)
                  for (f = r("<tr></tr>").css("height", b + "px").appendTo(c),
                  i = 0; i < a.getModuleCount(); i++)
                      r("<td></td>").css("width", d + "px").css("background-color", a.isDark(e, i) ? h.foreground : h.background).appendTo(f);
          h.resolve(),
          a = c,
          jQuery(a).appendTo(this)
      }
      ))
  }
  ;
  const H_COLORS = [53.052525792718235, 251.87529825388802, 62.03630716515285, 173.3273030492584, 280.8308701295395, 260.1953468776935, 75.85683177136873, 228.2858640631668, 334.49989464733727, 77.4108468886023, 61.36052841455026, 204.50103751990662, 87.76752311552178, 204.4384107285188, 275.2883044473277, 214.84128530220653, 256.4257018317882, 155.11619223891356, 315.6931351810138, 316.89752062211176, 105.25019489193569, 228.10411139078263, 89.311588163238, 259.0718713770065, 311.5596636364238, 208.20336102539312, 171.00169034529992, 12.152676858241689, 233.51272375685065, 23.96516197793499, 63.78214085942982, 343.96698979772276, 157.81176555559296, 155.15145425941117, 299.2726332064791, 295.4605325602281, 164.5017433858136, 184.7448984485577, 187.01234367025208, 260.44102525492326, 136.81494833306294, 254.18301020774408, 119.71117269226505, 214.27830825561784, 37.61863983287628, 139.81020421078597, 57.09055354420798, 359.743782677861, 197.13340861033143, 2.6375532721266026, 42.3712453873958, 41.25868363925779, 349.8063175652665, 222.46063397984796, 139.46508505889904, 287.85373566968764, 42.592135678233504, 118.67017618143534, 30.975066377983556, 171.41290708513804, 66.62445196129016, 33.26923032380903, 256.6673421985897, 270.22206128962563, 52.563634616505894, 94.031967599688, 118.52141774473588, 193.4720115186319, 38.31832882006633, 322.6375351461221, 303.82566618255794, 109.22622187612625, 136.11420930875155, .5570487143352576, 281.78651301651263, 85.3381900870202, 276.16775851802635, 84.6452709452958, 216.1864492512823, 121.90253519100013, 246.44030752635734, 309.12515260893076, 69.21447970928698, 310.13967472016947, 126.43665952932349, 33.7718702933078, 175.39004400155466, 37.09823350762455, 285.55229240159355, 279.86834425011045, 247.81584556708594, 244.1958555478265, 159.8386469096506, 235.54389161928313, 32.37528235506663, 271.0447929597106, 317.8014369395441, 305.14045610476865, 324.1876547745747, 83.98352720242123]
    , editor = ace.edit("editor");
  editor.$blockScrolling = 1 / 0,
  editor.setOptions({
      enableAutoIndent: !0,
      showPrintMargin: !1,
      enableBasicAutocompletion: !0,
      enableSnippets: !0,
      enableLiveAutocompletion: !0,
      showInvisibles: !0
  }),
  editor.setTheme("ace/theme/tomorrow"),
  editor.session.setMode("ace/mode/python");
  const THEMES = {
      dark: "tomorrow_night_bright",
      white: "tomorrow"
  };
  var CURRENT_THEME = "white"
    , CURRENT_FONT_SIZE = "16px"
    , DEFAULT_CODE = "3VXNbtswDH4aAulNlvwjHUVbQYFe+wIBFqyGkebQFtjeviQtRnKSbsOOBWSF+UiK1EdKAusg9RD3EFpILWACjyIgRFJ5iA1EDymAbwA9G/sRQoDkGIkDpIF92UYQ34pgwQcVRhVQBKcqB+gUkZVDD0iqDnAEv9cQKduEIQtxyguiUUQXjAZMpPF8Ph1nsAbcxHOHYG1kiRb3HQSSLdiRZryLjnfR6RrtJom1fLz8PtfRGmsMufQ9z03byo83av92fK2tWVs+sXmcl8Py8Rejp/PLJmpHqpY+ztatJu8ca6moYH5+zm/HpUA9QSfZmZAarJjl/41WTQpqjSsKTKUJrGmKgrjJipbZilZLZ7U7GkXIRo1LmwTuKWoE1JR85E7EtUlX9wCO68xBdWTOOjzx3nV3Wp0MX1HCdS50lIYL3IvB/V8ip8OvDd+1bv4GRG9GdrQlXCFgrKsyr1U5vP6gWVr3goFLWiw+GgWX01ltOO/hcrk0nPqf8/uiLtu0/tm/nJr5yklTF6NN/93geVdb/5uTWgN3PUq/X4WUK8qDH6qq0rU9lUs69rvqXFSZ7WnefZnywwOlsHyHDi4P28ChMRZjfat26xvS4SIc8P0Pac9Pk74IylNtQC+DYaqtZa4+AQ==";
  const THEME_COLORS = {
      white: function() {
          $("#theme-names").prop("selectedIndex", 0),
          CURRENT_THEME = "white",
          iostream.changeMode("light"),
          $(".btn-secondary").each((function(index, element) {
              $(element).removeClass("btn-secondary").addClass("btn-light")
          }
          )),
          $("body,.split-pane-frame-s").css({
              color: "rgb(0,0,0)",
              background: "rgb(248, 249, 250)"
          }),
          $(".modal").css("color", "rgb(0,0,0)"),
          $("#stepRange-base").css({
              "background-color": "rgb(248, 249, 250)"
          }),
          $(".tab-pane,.tab-content").css({
              color: "rgb(0,0,0)",
              "background-color": "rgb(255,255,255)"
          }),
          $(".ace-tomorrow").css("background-color", "rgb(255,255,255)"),
          $(".ace-tomorrow .ace_gutter").css("background", "#f6f6f6")
      },
      dark: function() {
          $("#theme-names").prop("selectedIndex", 1),
          CURRENT_THEME = "dark",
          iostream.changeMode("dark"),
          $(".btn-light").each((function(index, element) {
              $(element).removeClass("btn-light").addClass("btn-secondary")
          }
          )),
          $("body,.split-pane-frame-s").css({
              color: "#DEDEDE",
              background: "#1a1a1a"
          }),
          $(".modal").css("color", "rgb(0,0,0)"),
          $("#stepRange-base").css({
              "background-color": "rgb(0,0,0)"
          }),
          $(".tab-pane,.tab-content").css({
              color: "rgb(0,0,0)",
              "background-color": "rgb(219, 219, 219)"
          }),
          $(".ace-tomorrow-night-bright").css({
              background: "rgb(0,0,0)",
              "background-color": "rgb(0,0,0)"
          }),
          $(".ace-tomorrow-night-bright .ace_gutter").css("background", "#1a1a1a")
      }
  };
  function save_as_txt() {
      let result = $("#ffname").val()
        , lnk = document.getElementById("save");
      if (result) {
          let filename = result + ".txt"
            , blob = new Blob([editor.getValue()],{
              type: "text/plain"
          });
          window.navigator.msSaveBlob ? window.navigator.msSaveBlob(blob, filename) : (window.URL = window.URL || window.webkitURL,
          lnk.setAttribute("href", window.URL.createObjectURL(blob)),
          lnk.setAttribute("download", filename)),
          lnk.click()
      }
  }
  $("#theme-names").on("change", (function(e) {
      editor.setTheme("ace/theme/" + THEMES[e.target.value], (function() {
          THEME_COLORS[e.target.value](),
          $(".language-python .ace-tomorrow").css("background-color", "rgba(255,255,255,0)")
      }
      ))
  }
  )),
  editor.setTheme("ace/theme/" + THEMES[CURRENT_THEME], (function() {
      THEME_COLORS[CURRENT_THEME]()
  }
  )),
  function() {
      $("#theme-names").empty();
      let themes = {
          white: "ライト",
          dark: "ダーク"
      }
        , c = 0;
      for (let k in themes)
          $("#theme-names").append('<option value="' + k + '"' + (0 == c ? " selected" : "") + ">" + themes[k] + "</option>"),
          c++
  }(),
  $("#font-sizes").on("change", (function(e) {
      CURRENT_FONT_SIZE = e.target.value,
      editor.setOption("fontSize", e.target.value),
      iostream.setCommonStyle({
          fontSize: e.target.value
      }),
      $("#var-table").css("font-size", e.target.value),
      $("#canvas-table").css("font-size", e.target.value)
  }
  )),
  editor.commands.addCommand({
      Name: "savefile",
      bindKey: {
          win: "Ctrl-S",
          mac: "Command-S"
      },
      exec: function(editor) {
          $("#save_as_txt").trigger("click")
      }
  }),
  $("#ffname").on("keydown", (function(e) {
      13 == e.keyCode && $("#saveok").trigger("click")
  }
  ));
  const iostream = JSCLI("console", (function(e) {
      $("#state-label").empty().append('<span class="badge badge-danger">' + (IS_STEP_RUN ? "ステップ" : "") + "実行中</span>"),
      postMessageToBack("stdin", e)
  }
  ));
  iostream.setCommonStyle({
      width: "100%",
      height: "calc(100% - 28px)",
      fontSize: CURRENT_FONT_SIZE
  }),
  iostream.closeStream(),
  function() {
      $("#font-sizes").empty();
      for (let fs = 8; fs <= 30; fs += 2)
          $("#font-sizes").append('<option value="' + fs + 'px"' + (fs + "px" == CURRENT_FONT_SIZE ? " selected" : "") + ">" + fs + "px</option>");
      editor.setOption("fontSize", CURRENT_FONT_SIZE),
      iostream.setCommonStyle({
          fontSize: CURRENT_FONT_SIZE
      }),
      $("#var-table").css("font-size", CURRENT_FONT_SIZE),
      $("#canvas-table").css("font-size", CURRENT_FONT_SIZE)
  }();
  const stepRange = document.getElementById("stepRange")
    , canvas = document.getElementById("g-canvas")
    , ctx = canvas.getContext("2d")
    , Graphics = {
      init: function() {
          canvas.width = 0,
          canvas.height = 0,
          canvas.style.display = "none",
          ctx.font = "16px serif",
          ctx.fillStyle = "rgba(0,0,0)",
          ctx.strokeStyle = "rgb(0,0,0)",
          ctx.lineWidth = 3,
          this.clear(),
          this.methods = {
              "描画領域を開く": this.display,
              "背景の色": this.backGround,
              "四角形を描画": this.rect,
              "文字列を描画": this.text,
              "楕円を描画": this.ellipse,
              "円を描画": this.circle,
              "直線を描画": this.line,
              "線の色": this.lineColor,
              "線の幅": this.width,
              "図形の色": this.fillColor
          }
      },
      text: function(a) {
          ctx.font = Number(a[3]) + "px serif",
          ctx.fillText(a[2], Number(a[0]), Number(a[1]))
      },
      fontsize: function(a) {
          ctx.font = Number(a[0]) + "px serif"
      },
      backGround: function(a) {
          let old = ctx.fillStyle;
          ctx.fillStyle = a[0],
          ctx.fillRect(0, 0, canvas.width, canvas.height),
          ctx.fillStyle = old
      },
      display: function(a) {
          canvas.width = Number(a[0]),
          canvas.height = Number(a[1]),
          canvas.style.display = "block"
      },
      clear: function() {
          ctx.beginPath(),
          ctx.clearRect(0, 0, canvas.width, canvas.height),
          ctx.closePath(),
          ctx.stroke()
      },
      rect: function(a) {
          ctx.beginPath(),
          ctx.fillRect(Number(a[0]), Number(a[1]), Number(a[2]), Number(a[3])),
          ctx.strokeRect(Number(a[0]), Number(a[1]), Number(a[2]), Number(a[3])),
          ctx.closePath(),
          ctx.stroke()
      },
      ellipse: function(a) {
          ctx.beginPath(),
          ctx.ellipse(Number(a[0]), Number(a[1]), Number(a[2]), Number(a[3]), 0, 0, 2 * Math.PI),
          ctx.closePath(),
          ctx.fill(),
          ctx.stroke()
      },
      circle: function(a) {
          ctx.beginPath(),
          ctx.ellipse(Number(a[0]), Number(a[1]), Number(a[2]), Number(a[2]), 0, 0, 2 * Math.PI),
          ctx.closePath(),
          ctx.fill(),
          ctx.stroke()
      },
      line: function(a) {
          ctx.beginPath(),
          ctx.moveTo(Number(a[0]), Number(a[1])),
          ctx.lineTo(Number(a[2]), Number(a[3])),
          ctx.closePath(),
          ctx.stroke()
      },
      lineColor: function(a) {
          ctx.strokeStyle = a[0]
      },
      fillColor: function(a) {
          ctx.fillStyle = a[0]
      },
      width: function(a) {
          ctx.lineWidth = Number(a[0])
      },
      invoke: function(name, args) {
          this.methods[name] && this.methods[name](args)
      }
  };
  var FIELDS_LIST = []
    , STEP_COUNT = 0
    , CUR = 0
    , IS_STEP_RUN = !1
    , INPUT_PAUSING = !1
    , STATE_RUNNING = !1
    , lastLine = -1
    , curLine = -1
    , worker = null;
  const MAX_PROC_COUNT = 1e3
    , MAX_STEP_COUNT = 1e3;
  var MAX_STEP = 1e3;
  const DEBUG = !1
    , SYNTAX_WORKER = createWorker();
  var TOKENS = [];
  function onMessage(event) {
      let data = event.data;
      if ("stdout" == data.type)
          iostream.write(data.value);
      else if ("graphic" == data.type) {
          let e = data.value;
          Graphics.invoke(e.command, e.args)
      } else if ("stdin_pause" == data.type)
          INPUT_PAUSING = !0,
          iostream.openStream(),
          $("#state-label").empty().append('<span class="badge badge-warning">入力待ち</span>');
      else if ("error" == data.type) {
          let e = JSON.parse(data.value);
          e.stepCount = STEP_COUNT,
          addFieldList(e)
      } else if ("end" == data.type) {
          let e = JSON.parse(data.value);
          iostream.closeStream(),
          e.stepCount = STEP_COUNT,
          hilight(e),
          IS_STEP_RUN ? (addFieldList(e),
          $("#state-label").empty().append('<span class="badge badge-info">ステップ実行終了</span>')) : (STATE_RUNNING = !1,
          editor.session.clearBreakpoints(),
          editor.session.removeMarker(CUR_MARKER),
          editor.setOption("readOnly", !1),
          $("#state-label").empty().append('<span class="badge badge-info">実行待ち</span>')),
          worker.terminate(),
          worker = null
      } else if ("report_vars" == data.type)
          updateVarTable(JSON.parse(data.value));
      else if ("start" == data.type) {
          let e = JSON.parse(data.value);
          editor.setValue(e.code + "\n"),
          editor.session.setUndoManager(new ace.UndoManager),
          editor.clearSelection()
      } else if ("step" != data.type || INPUT_PAUSING)
          if ("err_stdout" == data.type) {
              let errs = data.value
                , buf = []
                , col = -1
                , row = -1
                , mbuf = ""
                , spacer = "";
              for (let i = 0; i < errs.length; i++) {
                  let ei = errs[i];
                  "callStackRoot" == ei.type ? (ei.pos.indexOf("プログラム") >= 0 && (col = ei.col,
                  row = ei.row,
                  mbuf = escapeDOM("↑ " + row + "行目," + col + "文字目 : " + ei.msg)),
                  buf.push("<span style='color:red;'>" + ei.pos + escapeDOM(ei.msg) + "</span>")) : "callStack" == ei.type ? buf.push("<span style='color:red;'>" + ei.pos + "'" + escapeDOM(ei.trace) + "'の呼び出し先</span>") : (spacer = "<span style='color:transparent;'>" + ei.cur1 + "&nbsp;</span>",
                  buf.push("<span style='font-size:1em;border-top-right-radius: .2rem;border-top-left-radius: .2rem;border: 1px solid rgb(159, 159, 159);border-bottom:0px;color:red;background-color: #f8f9fa;'><span style='color:#4D4D4C;'>★</span>付近でエラー</span><pre style='min-width:250px;background-color: #ffffc2;border: 1px solid rgb(159, 159, 159);border-radius: .2rem;border-top-left-radius: 0;display: table;'>\n<code class='er language-python'>" + (ei.pre + ei.cur1) + "★" + ei.cur2 + ei.nex + "</code></pre>"))
              }
              setErrorPos(row, col, spacer + '<span class="errorMess">' + mbuf + "</span>", Math.floor((spacer.length + mbuf.length) / 2)),
              iostream.writeDOM(buf.join("\n")),
              highlight_()
          } else
              "stdin_accepted" == data.type && (INPUT_PAUSING = !1,
              IS_STEP_RUN && STEP_GENERATOR.next());
      else {
          let e = JSON.parse(data.value);
          e.stepCount = STEP_COUNT,
          STEP_COUNT++,
          addFieldList(e),
          hilight(e)
      }
  }
  SYNTAX_WORKER.onmessage = function(event) {
      let data = event.data;
      if ("parse" == data.type) {
          let e = JSON.parse(data.value);
          "parse_error" == e.state ? editor.session.setAnnotations([{
              column: e.charAt - 1,
              raw: e.message[0].msg,
              row: e.lineNumber - 1,
              text: e.message[0].msg,
              type: "error"
          }]) : editor.session.clearAnnotations()
      } else if ("tokens" == data.type) {
          let tokens = JSON.parse(data.value);
          TOKENS = [];
          for (let i = 0; i < tokens.length; i++) {
              let p = tokens[i];
              "TAB" != p.type && "SPACE" != p.type && "CSPACE" != p.type && "EN_B" != p.type && "EN_R" != p.type && "NEW_LINE" != p.type && TOKENS.push(p)
          }
      }
  }
  ,
  setInterval(()=>{
      if (!isRunning()) {
          let code = editor.getValue();
          SYNTAX_WORKER.postMessage({
              type: "tokenize",
              value: code
          })
      }
  }
  , 1500),
  setInterval(()=>{
      if (textChanged && !isRunning()) {
          let code = editor.getValue();
          SYNTAX_WORKER.postMessage({
              type: "parse",
              value: code
          }),
          textChanged = !1
      }
  }
  , 500),
  $("#toPy").on("click", (function() {
      if (!editor.getOption("readOnly")) {
          let w = createWorker();
          w.onmessage = function(event) {
              let data = event.data;
              if ("parse" == data.type) {
                  let e = JSON.parse(data.value);
                  iostream.clear(),
                  "parse_error" != e.state ? (iostream.writeDOM("<span style='color:red;'>注意:Pythonの実行環境で必ずしも正しく動くとは限りません．</span>\n"),
                  iostream.writeDOM("<span style='color:red;'>セキュリティの関係上，ブラウザによってはダウンロード時に警告メッセージが表示されることがあります．</span>\n"),
                  iostream.writeDOM(['<div style="text-align: left;">', '<button class="btn btn-sm" style="margin-left:0px;margin-right:0px;border: 1px solid #ac9;border-bottom:0px;background-color: #eeee;padding-top:0px;padding-bottom:0px;border-bottom-right-radius: 0px;border-bottom-left-radius: 0px;font: inherit;" id="copyBtn"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-files" viewBox="0 0 16 16"><path d="M13 0H6a2 2 0 0 0-2 2 2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2 2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm0 13V4a2 2 0 0 0-2-2H5a1 1 0 0 1 1-1h7a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1zM3 4a1 1 0 0 1 1-1h7a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V4z"/></svg>コピー</button>', '<button class="btn btn-sm" style="margin-left:0px;margin-right:0px;border: 1px solid #ac9;border-bottom:0px;background-color: #eeee;padding-top:0px;padding-bottom:0px;border-bottom-right-radius: 0px;border-bottom-left-radius: 0px;font: inherit;" id="dlBtn"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-download" viewBox="0 0 16 16"><path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"/><path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z"/></svg>ダウンロード</button>', "</div>", '<pre class="codearea">', escape(e.py_code), "</pre>"].join("")),
                  $("#copyBtn").on("click", (function() {
                      var copyFrom = document.createElement("textarea");
                      copyFrom.textContent = e.py_code;
                      var bodyElm = document.getElementsByTagName("body")[0];
                      bodyElm.appendChild(copyFrom),
                      copyFrom.select();
                      var retVal = document.execCommand("copy");
                      return bodyElm.removeChild(copyFrom),
                      retVal
                  }
                  )),
                  $("#dlBtn").on("click", (function() {
                      let filename = "code.py"
                        , lnk = document.getElementById("save")
                        , blob = new Blob([e.py_code],{
                          type: "text/python"
                      });
                      window.navigator.msSaveBlob ? window.navigator.msSaveBlob(blob, filename) : (window.URL = window.URL || window.webkitURL,
                      lnk.setAttribute("href", window.URL.createObjectURL(blob)),
                      lnk.setAttribute("download", filename)),
                      lnk.click()
                  }
                  ))) : iostream.writeDOM("<span style='color:red;'>文法エラーを含むので変換できません．</span>")
              }
          }
          ,
          w.postMessage({
              type: "parse",
              value: editor.getValue()
          })
      }
  }
  ));
  var textChanged = !1;
  editor.on("change", (function(e) {
      textChanged = !0,
      deleteErrorPos(),
      $(".linker").off("click"),
      editor.session.removeMarker(CUR_MARKER);
      for (let i = 0; i < MARKERS.length; i++)
          editor.session.removeMarker(MARKERS[i]);
      MARKERS = [],
      LINKER_EVENTS = {}
  }
  )),
  document.getElementById("editor").oncontextmenu = function() {
      return !1
  }
  ,
  document.getElementById("editor").addEventListener("contextmenu", (function(e) {
      editor.getOption("readOnly") || $("#ipsopen").trigger("click")
  }
  ));
  var errorID, errorIDInterval, errorDOM = "", showsError = !1;
  function setErrorPos(row, col, dom, len) {
      function wc() {
          showsError && ($("#errorMessage").remove(),
          $(".ace_step").append('<div id="errorMessage">' + dom + "</div>"))
      }
      col < 0 || row < 0 || (editor.setValue(editor.getValue().trim() + "\n" + new Array(len).fill("　", 0, len).join("")),
      editor.session.setUndoManager(new ace.UndoManager),
      editor.clearSelection(),
      errorID = editor.session.highlightLines(row, col, 0, !0),
      showsError = !0,
      errorDOM = dom,
      errorIDInterval = setInterval(wc, 100))
  }
  function deleteErrorPos() {
      errorID && (editor.session.removeMarker(errorID.id),
      editor.session.clearAnnotations(),
      $("#errorMessage").remove(),
      clearInterval(errorIDInterval),
      showsError = !1,
      errorDOM = "")
  }
  function escapeDOM(m) {
      let quasi = document.createElement("span");
      return quasi.innerText = m,
      quasi.innerHTML
  }
  function addFieldList(e) {
      for (FIELDS_LIST.push({
          lastLine: e.lastLine,
          lineNumber: e.lineNumber,
          fieldList: e.fieldList,
          stdout: iostream.getHTML(),
          canvasImg: canvas.width > 0 && canvas.height > 0 ? ctx.getImageData(0, 0, canvas.width, canvas.height) : void 0,
          canvasVisible: canvas.style.display,
          stepCount: e.stepCount
      }); FIELDS_LIST.length > 1e3; )
          FIELDS_LIST.shift();
      stepRange.max = FIELDS_LIST.length - 1,
      stepRange.value = FIELDS_LIST.length - 1
  }
  function prev() {
      if (CUR > 0) {
          let e;
          CUR--,
          hilight(FIELDS_LIST[CUR])
      }
      0 == CUR ? $("#state-label").empty().append('<span class="badge badge-info">実行待ち</span>') : $("#state-label").empty().append('<span class="badge badge-danger">ステップ実行中</span>')
  }
  function hilight(e) {
      stepRange.value = CUR,
      editor.session.clearBreakpoint(lastLine - 1),
      editor.session.clearBreakpoint(curLine - 1),
      lastLine = e.lastLine,
      curLine = e.lineNumber,
      editor.session.setBreakpoint(lastLine - 1, "last_line"),
      editor.session.setBreakpoint(curLine - 1, "current_line"),
      editor.scrollToLine(curLine - 1, !1, !0),
      void 0 !== e.stdout && iostream.setHTML(e.stdout),
      void 0 !== e.canvasImg && ctx.putImageData(e.canvasImg, 0, 0),
      canvas.style.display = e.canvasVisible,
      IS_STEP_RUN && $("#stepLabel").empty().append("ビューワー(" + e.stepCount + "ステップ目)"),
      updateVarTable(e),
      showsError = FIELDS_LIST.length - 2 <= CUR,
      $("#errorMessage").remove(),
      showsError && $(".ace_step").append('<div id="errorMessage">' + errorDOM + "</div>")
  }
  var CHARTS = [], LAST_CHARTS = [], CUR_MARKER;
  function clearVarTable() {
      $("#var-table").empty(),
      $("#var-table").append("<tr style='margin-bottom:1em;'><th>グローバル変数</th><td></td><td></td></tr>"),
      $("#var-table").append("<tr style='margin-bottom:1em;'><th>ローカル変数</th><td></td><td></td></tr>")
  }
  var MARKERS = []
    , LINKER_EVENTS = {};
  function updateVarTable(e) {
      CHARTS = [];
      for (let i = 0; i < LAST_CHARTS.length; i++)
          LAST_CHARTS[i].destroy();
      if (void 0 !== e.fieldList) {
          $("#var-table").empty(),
          $("#var-table").append("<tr style='margin-bottom:1em;'><th>グローバル変数</th><td></td><td></td></tr>");
          for (let i = 0; i < e.fieldList.global.length; i++)
              e.fieldList.global[i].isBuiltin || ($("#var-table").append("<tr id='tr-g-" + i + "' style='margin-bottom:1em;'></tr>"),
              $("#tr-g-" + i).append("<td style='padding: .75rem;text-align: right;padding-right: 0px;'><div class='bg-lightblue inline p-1 pl-2 pr-2 border border-dark' id='td-name-g-" + i + "'></div></td>"),
              $("#tr-g-" + i).append("<td class='bg-arrow' id='td-type-g-" + i + "'></td>"),
              $("#tr-g-" + i).append("<td style='padding: .75rem;padding-left: 0px;' id='td-value-g-" + i + "'></td>"),
              $("#td-name-g-" + i).text(e.fieldList.global[i].name),
              $("#td-type-g-" + i).text("　　　　　"),
              $("#td-value-g-" + i).append(parse(e.fieldList.global[i].visual, e.fieldList.global[i].visualize)));
          $("#var-table").append("<tr style='margin-bottom:1em;'><th>ローカル変数</th><td></td><td></td></tr>");
          for (let i = 0; i < e.fieldList.local.length; i++)
              e.fieldList.local[i].isBuiltin || ($("#var-table").append("<tr id='tr-l-" + i + "' style='margin-bottom:1em;'></tr>"),
              $("#tr-l-" + i).append("<td style='padding: .75rem;text-align: right;padding-right: 0px;'><div class='bg-lightblue inline p-1 pl-2 pr-2 border border-dark' id='td-name-l-" + i + "'></div></td>"),
              $("#tr-l-" + i).append("<td class='bg-arrow' id='td-type-l-" + i + "'></td>"),
              $("#tr-l-" + i).append("<td style='padding: .75rem;padding-left: 0px;' id='td-value-l-" + i + "'></td>"),
              $("#td-name-l-" + i).text(e.fieldList.local[i].name),
              $("#td-type-l-" + i).text("　　　　　"),
              $("#td-value-l-" + i).append(parse(e.fieldList.local[i].visual, e.fieldList.local[i].visualize)));
          editor.session.removeMarker(CUR_MARKER);
          for (let i = 0; i < MARKERS.length; i++)
              editor.session.removeMarker(MARKERS[i]);
          MARKERS = [];
          let isOn = "on" == $("#profilelb")[0].innerText
            , cnt = 0;
          LINKER_EVENTS = {};
          let labels = []
            , data_true = []
            , data_false = []
            , data_run = [];
          for (let i in e.fieldList.profile) {
              let id = (i + "").split("@");
              if ("if" == id[0]) {
                  let nm = ""
                    , n = getColorRange(e.fieldList.profile[i].true);
                  "if" == e.fieldList.profile[i].type ? (nm = "もし(" + id[1] + "行目)",
                  labels.push("もし(" + id[1] + "行目)"),
                  data_true.push(e.fieldList.profile[i].true),
                  data_false.push(e.fieldList.profile[i].false),
                  data_run.push(e.fieldList.profile[i].true + e.fieldList.profile[i].false)) : "elif" == e.fieldList.profile[i].type ? (nm = "そうでなくもし(" + id[1] + "行目)",
                  labels.push("そうでなくもし(" + id[1] + "行目)"),
                  data_true.push(e.fieldList.profile[i].true),
                  data_false.push(e.fieldList.profile[i].false),
                  data_run.push(e.fieldList.profile[i].true + e.fieldList.profile[i].false)) : (nm = "そうでなければ(" + id[1] + "行目)",
                  labels.push("そうでなければ(" + id[1] + "行目)"),
                  data_true.push(0),
                  data_false.push(0),
                  data_run.push(e.fieldList.profile[i].true)),
                  LINKER_EVENTS[nm] = function() {
                      editor.session.removeMarker(CUR_MARKER);
                      let columnEnd = editor.session.getLine(id[1] - 1).length;
                      CUR_MARKER = editor.session.addMarker(new ace.Range(id[1] - 1,editor.session.getLine(id[1] - 1).match(/^\s*/)[0].length,id[1] - 1,columnEnd), "profileHighlight", "background"),
                      editor.scrollToLine(id[1] - 1, !1, !0)
                  }
                  ,
                  isOn && MARKERS.push(editor.session.addMarker(new ace.Range(id[1] - 1,editor.session.getLine(id[1] - 1).match(/^\s*/)[0].length,id[1] - 1,editor.session.getLine(id[1] - 1).length), "profileHighlight" + n, "background"))
              } else if ("forinc" == id[0]) {
                  labels.push("増やしながら(" + id[1] + "行目)"),
                  data_true.push(0),
                  data_false.push(0),
                  data_run.push(e.fieldList.profile[i]);
                  let n = getColorRange(e.fieldList.profile[i]);
                  LINKER_EVENTS["増やしながら(" + id[1] + "行目)"] = function() {
                      editor.session.removeMarker(CUR_MARKER);
                      let columnEnd = editor.session.getLine(id[1] - 1).length;
                      CUR_MARKER = editor.session.addMarker(new ace.Range(id[1] - 1,editor.session.getLine(id[1] - 1).match(/^\s*/)[0].length,id[1] - 1,columnEnd), "profileHighlight", "background"),
                      editor.scrollToLine(id[1] - 1, !1, !0)
                  }
                  ,
                  isOn && MARKERS.push(editor.session.addMarker(new ace.Range(id[1] - 1,editor.session.getLine(id[1] - 1).match(/^\s*/)[0].length,id[1] - 1,editor.session.getLine(id[1] - 1).length), "profileHighlight" + n, "background"))
              } else if ("fordec" == id[0]) {
                  labels.push("減らしながら(" + id[1] + "行目)"),
                  data_true.push(0),
                  data_false.push(0),
                  data_run.push(e.fieldList.profile[i]);
                  let n = getColorRange(e.fieldList.profile[i]);
                  LINKER_EVENTS["減らしながら(" + id[1] + "行目)"] = function() {
                      editor.session.removeMarker(CUR_MARKER);
                      let columnEnd = editor.session.getLine(id[1] - 1).length;
                      CUR_MARKER = editor.session.addMarker(new ace.Range(id[1] - 1,editor.session.getLine(id[1] - 1).match(/^\s*/)[0].length,id[1] - 1,columnEnd), "profileHighlight", "background"),
                      editor.scrollToLine(id[1] - 1, !1, !0)
                  }
                  ,
                  isOn && MARKERS.push(editor.session.addMarker(new ace.Range(id[1] - 1,editor.session.getLine(id[1] - 1).match(/^\s*/)[0].length,id[1] - 1,editor.session.getLine(id[1] - 1).length), "profileHighlight" + n, "background"))
              } else if ("xfor" == id[0]) {
                  labels.push("拡張ループ(" + id[1] + "行目)"),
                  data_true.push(0),
                  data_false.push(0),
                  data_run.push(e.fieldList.profile[i]);
                  let n = getColorRange(e.fieldList.profile[i]);
                  LINKER_EVENTS["拡張ループ(" + id[1] + "行目)"] = function() {
                      editor.session.removeMarker(CUR_MARKER);
                      let columnEnd = editor.session.getLine(id[1] - 1).length;
                      CUR_MARKER = editor.session.addMarker(new ace.Range(id[1] - 1,editor.session.getLine(id[1] - 1).match(/^\s*/)[0].length,id[1] - 1,columnEnd), "profileHighlight", "background"),
                      editor.scrollToLine(id[1] - 1, !1, !0)
                  }
                  ,
                  isOn && MARKERS.push(editor.session.addMarker(new ace.Range(id[1] - 1,editor.session.getLine(id[1] - 1).match(/^\s*/)[0].length,id[1] - 1,editor.session.getLine(id[1] - 1).length), "profileHighlight" + n, "background"))
              } else if ("func" == id[0]) {
                  labels.push(id[3] + " の呼び出し(" + id[1] + "行目," + id[2] + "文字目)"),
                  data_true.push(0),
                  data_false.push(0),
                  data_run.push(e.fieldList.profile[i]);
                  let n = getColorRange(e.fieldList.profile[i]);
                  LINKER_EVENTS[id[3] + " の呼び出し(" + id[1] + "行目," + id[2] + "文字目)"] = function() {
                      editor.session.removeMarker(CUR_MARKER),
                      CUR_MARKER = editor.session.addMarker(new ace.Range(id[1] - 1,id[2] - 1,id[1] - 1,id[2] - 1 + id[3].length), "profileHighlight", "background"),
                      editor.scrollToLine(id[1] - 1, !1, !0)
                  }
                  ,
                  isOn && MARKERS.push(editor.session.addMarker(new ace.Range(id[1] - 1,editor.session.getLine(id[1] - 1).match(/^\s*/)[0].length,id[1] - 1,editor.session.getLine(id[1] - 1).length), "profileHighlight" + n, "background"))
              } else if ("dainyu" == id[0]) {
                  labels.push("代入" + id[1] + "(" + id[2] + "行目)"),
                  data_true.push(0),
                  data_false.push(0),
                  data_run.push(e.fieldList.profile[i]);
                  let n = getColorRange(e.fieldList.profile[i]);
                  LINKER_EVENTS["代入" + id[1] + "(" + id[2] + "行目)"] = function() {
                      editor.session.removeMarker(CUR_MARKER);
                      let columnEnd = editor.session.getLine(id[2] - 1).length;
                      CUR_MARKER = editor.session.addMarker(new ace.Range(id[2] - 1,editor.session.getLine(id[2] - 1).match(/^\s*/)[0].length,id[2] - 1,columnEnd), "profileHighlight", "background"),
                      editor.scrollToLine(id[2] - 1, !1, !0)
                  }
                  ,
                  isOn && MARKERS.push(editor.session.addMarker(new ace.Range(id[2] - 1,editor.session.getLine(id[2] - 1).match(/^\s*/)[0].length,id[2] - 1,editor.session.getLine(id[2] - 1).length), "profileHighlight" + n, "background"))
              } else if ("return" == id[0]) {
                  labels.push("返す(" + id[1] + "行目)"),
                  data_true.push(0),
                  data_false.push(0),
                  data_run.push(e.fieldList.profile[i]);
                  let n = getColorRange(e.fieldList.profile[i]);
                  LINKER_EVENTS["返す(" + id[1] + "行目)"] = function() {
                      editor.session.removeMarker(CUR_MARKER);
                      let columnEnd = editor.session.getLine(id[1] - 1).length;
                      CUR_MARKER = editor.session.addMarker(new ace.Range(id[1] - 1,editor.session.getLine(id[1] - 1).match(/^\s*/)[0].length,id[1] - 1,columnEnd), "profileHighlight", "background"),
                      editor.scrollToLine(id[1] - 1, !1, !0)
                  }
                  ,
                  isOn && MARKERS.push(editor.session.addMarker(new ace.Range(id[1] - 1,editor.session.getLine(id[1] - 1).match(/^\s*/)[0].length,id[1] - 1,editor.session.getLine(id[1] - 1).length), "profileHighlight" + n, "background"))
              } else if ("yield" == id[0]) {
                  labels.push("一旦返す(" + id[1] + "行目)"),
                  data_true.push(0),
                  data_false.push(0),
                  data_run.push(e.fieldList.profile[i]);
                  let n = getColorRange(e.fieldList.profile[i]);
                  LINKER_EVENTS["返す(" + id[1] + "行目)"] = function() {
                      editor.session.removeMarker(CUR_MARKER);
                      let columnEnd = editor.session.getLine(id[1] - 1).length;
                      CUR_MARKER = editor.session.addMarker(new ace.Range(id[1] - 1,editor.session.getLine(id[1] - 1).match(/^\s*/)[0].length,id[1] - 1,columnEnd), "profileHighlight", "background"),
                      editor.scrollToLine(id[1] - 1, !1, !0)
                  }
                  ,
                  isOn && MARKERS.push(editor.session.addMarker(new ace.Range(id[1] - 1,editor.session.getLine(id[1] - 1).match(/^\s*/)[0].length,id[1] - 1,editor.session.getLine(id[1] - 1).length), "profileHighlight" + n, "background"))
              } else {
                  labels.push("条件繰返し(" + id[1] + "行目)"),
                  data_true.push(0),
                  data_false.push(0),
                  data_run.push(e.fieldList.profile[i]);
                  let n = getColorRange(e.fieldList.profile[i]);
                  LINKER_EVENTS["条件繰返し(" + id[1] + "行目)"] = function() {
                      editor.session.removeMarker(CUR_MARKER);
                      let columnEnd = editor.session.getLine(id[1] - 1).length;
                      CUR_MARKER = editor.session.addMarker(new ace.Range(id[1] - 1,editor.session.getLine(id[1] - 1).match(/^\s*/)[0].length,id[1] - 1,columnEnd), "profileHighlight", "background"),
                      editor.scrollToLine(id[1] - 1, !1, !0)
                  }
                  ,
                  isOn && MARKERS.push(editor.session.addMarker(new ace.Range(id[1] - 1,editor.session.getLine(id[1] - 1).match(/^\s*/)[0].length,id[1] - 1,editor.session.getLine(id[1] - 1).length), "profileHighlight" + n, "background"))
              }
              cnt++
          }
          $("#profile_graph_base").css({
              height: 2.5 * data_run.length + "em",
              width: 3 * data_run.length + "em"
          });
          let max_h = Math.max(32 * labels.length, 500);
          profileChart.canvas.parentNode.style.width = `${max_h}px`,
          profileChart.resize(),
          profileChart.data.labels = labels,
          profileChart.data.datasets[0].data = data_true,
          profileChart.data.datasets[1].data = data_false,
          profileChart.data.datasets[2].data = data_run,
          profileChart.update()
      }
      LAST_CHARTS = [];
      for (let i = 0; i < CHARTS.length; i++) {
          let ctx = document.getElementById("cv" + i);
          LAST_CHARTS.push(new Chart(ctx,CHARTS[i]))
      }
  }
  const profileChart = new Chart(document.getElementById("profile_graph"),{
      type: "horizontalBar",
      data: {
          labels: [],
          datasets: [{
              label: "真の回数",
              data: [],
              backgroundColor: "#F6AD3C"
          }, {
              label: "偽の回数",
              data: [],
              backgroundColor: "#A64A97"
          }, {
              label: "実行回数",
              data: [],
              backgroundColor: "#AACF52"
          }]
      },
      options: {
          maintainAspectRatio: !0,
          legend: {
              position: "top"
          },
          responsive: !0,
          scales: {
              xAxes: [{
                  scaleLabel: {
                      display: !1,
                      fontColor: "#999",
                      labelString: "実行回数"
                  },
                  stacked: !0,
                  ticks: {
                      stepSize: 1
                  }
              }],
              yAxes: [{
                  stacked: !0
              }]
          },
          legendCallback: function(chart) {}
      }
  });
  function getColorRange(n) {
      return 0 <= n && n <= 200 ? 1 : 200 < n && n <= 400 ? 2 : 400 < n && n <= 600 ? 3 : 600 < n && n <= 800 ? 4 : 800 < n && n <= 1e3 ? 5 : 1e3 < n && n <= 2e3 ? 6 : 2e3 < n && n <= 3e3 ? 7 : 8
  }
  function escape(c) {
      return $("#save").text(c),
      $("#save")[0].innerHTML.replace(/[ \t]/g, (function(match) {
          return {
              " ": "&nbsp;",
              "\t": "&nbsp;&nbsp;&nbsp;&nbsp;"
          }[match]
      }
      ))
  }
  function getChart(visualize, data, labels, targetType) {
      if ("円グラフ" == visualize.type) {
          let bgc = [];
          for (let i = 0; i < data.length; i++)
              bgc.push("hsl(" + H_COLORS[i % H_COLORS.length] + ",80%,60%)");
          return {
              type: "pie",
              data: {
                  labels: labels,
                  datasets: [{
                      label: targetType + "の値",
                      backgroundColor: bgc,
                      data: data
                  }]
              },
              options: {
                  animation: !1,
                  responsive: !1,
                  legend: {
                      display: visualize.legend
                  },
                  title: {
                      display: !1
                  },
                  layout: {
                      padding: {
                          left: 0,
                          right: 0,
                          top: 0,
                          bottom: 0
                      }
                  }
              }
          }
      }
      if ("折れ線グラフ" == visualize.type)
          return {
              type: "line",
              data: {
                  labels: labels,
                  datasets: [{
                      label: targetType + "の値",
                      data: data,
                      borderColor: "rgb(31, 119, 180)",
                      backgroundColor: "rgba(255,255,255,0)"
                  }]
              },
              options: {
                  animation: !1,
                  responsive: !1,
                  legend: {
                      display: visualize.legend
                  },
                  title: {
                      display: !1
                  },
                  scales: {
                      yAxes: [{
                          display: !0,
                          scaleLabel: {
                              display: !1
                          },
                          ticks: {
                              suggestedStepSize: 5
                          }
                      }],
                      xAxes: [{
                          display: !0,
                          barPercentage: .75,
                          categoryPercentage: .75,
                          scaleLabel: {
                              display: !1
                          },
                          ticks: {}
                      }]
                  },
                  layout: {
                      padding: {
                          left: 0,
                          right: 0,
                          top: 0,
                          bottom: 0
                      }
                  }
              }
          };
      if ("散布図" == visualize.type)
          return {
              type: "line",
              data: {
                  labels: labels,
                  datasets: [{
                      label: targetType + "の値",
                      data: data,
                      borderColor: "rgb(31, 119, 180)",
                      backgroundColor: "rgb(31, 119, 180)",
                      fill: !1,
                      pointRadius: 4,
                      pointHoverRadius: 4,
                      showLine: !1
                  }]
              },
              options: {
                  animation: !1,
                  responsive: !1,
                  legend: {
                      display: visualize.legend
                  },
                  title: {
                      display: !1
                  },
                  scales: {
                      yAxes: [{
                          display: !0,
                          scaleLabel: {
                              display: !1
                          },
                          ticks: {
                              suggestedStepSize: 5
                          }
                      }],
                      xAxes: [{
                          display: !0,
                          barPercentage: .75,
                          categoryPercentage: .75,
                          scaleLabel: {
                              display: !1
                          },
                          ticks: {}
                      }]
                  },
                  elements: {
                      point: {
                          pointStyle: "circle"
                      }
                  },
                  layout: {
                      padding: {
                          left: 0,
                          right: 0,
                          top: 0,
                          bottom: 0
                      }
                  }
              }
          };
      if ("ドーナツグラフ" == visualize.type) {
          let bgc = [];
          for (let i = 0; i < data.length; i++)
              bgc.push("hsl(" + H_COLORS[i % H_COLORS.length] + ",80%,60%)");
          return {
              type: "doughnut",
              data: {
                  datasets: [{
                      data: data,
                      backgroundColor: bgc
                  }],
                  labels: labels
              },
              options: {
                  animation: !1,
                  responsive: !1,
                  legend: {
                      display: visualize.legend
                  },
                  title: {
                      display: !1
                  },
                  layout: {
                      padding: {
                          left: 0,
                          right: 0,
                          top: 0,
                          bottom: 0
                      }
                  }
              }
          }
      }
      return "レーダーチャート" == visualize.type ? {
          type: "radar",
          data: {
              labels: labels,
              datasets: [{
                  label: targetType + "の値",
                  backgroundColor: "rgb(255,255,255,0)",
                  borderColor: "rgb(31, 119, 180)",
                  pointBackgroundColor: "rgb(255,255,255,0)",
                  data: data
              }]
          },
          options: {
              animation: !1,
              responsive: !1,
              legend: {
                  display: visualize.legend
              },
              title: {
                  display: !1
              },
              layout: {
                  padding: {
                      left: 0,
                      right: 0,
                      top: 0,
                      bottom: 0
                  }
              },
              scale: {
                  ticks: {
                      beginAtZero: !0
                  }
              }
          }
      } : {
          type: "bar",
          data: {
              labels: labels,
              datasets: [{
                  label: targetType + "の値",
                  data: data,
                  backgroundColor: "rgb(31, 119, 180)"
              }]
          },
          options: {
              animation: !1,
              responsive: !1,
              legend: {
                  display: visualize.legend
              },
              title: {
                  display: !1
              },
              scales: {
                  yAxes: [{
                      display: !0,
                      scaleLabel: {
                          display: !1
                      },
                      ticks: {
                          suggestedStepSize: 5
                      }
                  }],
                  xAxes: [{
                      display: !0,
                      barPercentage: .75,
                      categoryPercentage: .75,
                      scaleLabel: {
                          display: !1
                      },
                      ticks: {}
                  }]
              },
              layout: {
                  padding: {
                      left: 0,
                      right: 0,
                      top: 0,
                      bottom: 0
                  }
              }
          }
      }
  }
  function parse(obj, visualize) {
      let type = obj.type;
      if ("Array" == type) {
          let b = ['<table class="table-bordered border border-dark">', "<tbody>", "<caption style='caption-side: top;padding:0;'><small class=\"text-muted\">" + escape(obj.className) + "</small></caption>"];
          if (null == visualize) {
              b.push("<tr class='border border-dark text-secondary text-left'>");
              for (let i = 0; i < obj.value.length; i++)
                  b.push("<td class='bg-cream border-dark'><small class=\"text-muted\">" + i + "</small></td>");
              b.push("</tr>"),
              b.push("<tr class='border border-dark text-center'>");
              for (let i = 0; i < obj.value.length; i++)
                  b.push("<td class='bg-cream border-dark p-1 pr-2 pl-2'>" + parse(obj.value[i], obj.value[i].visualize) + "</td>");
              b.push("</tr>")
          } else {
              b.push("<tr class='border border-dark text-secondary text-left'><td>"),
              b.push("<canvas id='cv" + CHARTS.length + "' style='position: relative; height:300px; width:350px'></canvas>");
              let labels = []
                , data = [];
              for (let i = 0; i < obj.value.length; i++)
                  labels.push(i + "番目"),
                  data.push(Number(obj.value[i].value));
              CHARTS.push(getChart(visualize, data, labels, obj.className)),
              b.push("</td></tr>")
          }
          return b.push("</tbody>"),
          b.push("</table>"),
          b.join("")
      }
      if ("set" == type) {
          let b = ["<table style='border:1px solid;'>", "<tbody>", "<caption style='caption-side: top;padding:0;'><small class=\"text-muted\">" + escape(obj.className) + "</small></caption>"];
          b.push("<tr class='text-center'>");
          for (let i = 0; i < obj.value.length; i++)
              b.push("<td class='bg-cream p-1 pr-2 pl-2'>" + parse(obj.value[i], visualize) + "</td>");
          return b.push("</tr>"),
          b.push("</tbody>"),
          b.push("</table>"),
          b.join("")
      }
      if ("tuple" == type) {
          let b = ['<table class="table-bordered border border-dark">', "<tbody>", "<caption style='caption-side: top;padding:0;'><small class=\"text-muted\">" + escape(obj.className) + "</small></caption>"];
          if (null == visualize) {
              b.push("<tr class='border border-dark text-secondary text-left'>");
              for (let i = 0; i < obj.value.length; i++)
                  b.push("<td class='bg-cream border-dark'><small class=\"text-muted\">" + i + "</small></td>");
              b.push("</tr>"),
              b.push("<tr class='border border-dark text-center'>");
              for (let i = 0; i < obj.value.length; i++)
                  b.push("<td class='bg-cream border-dark p-1 pr-2 pl-2'>" + parse(obj.value[i], obj.value[i].visualize) + "</td>");
              b.push("</tr>")
          } else {
              b.push("<tr class='border border-dark text-secondary text-left'><td>"),
              b.push("<canvas id='cv" + CHARTS.length + "' style='position: relative; height:300px; width:350px'></canvas>");
              let labels = []
                , data = [];
              for (let i = 0; i < obj.value.length; i++)
                  labels.push(i + "番目"),
                  data.push(Number(obj.value[i].value));
              CHARTS.push(getChart(visualize, data, labels, obj.className)),
              b.push("</td></tr>")
          }
          return b.push("</tbody>"),
          b.push("</table>"),
          b.join("")
      }
      if ("Dictionary" == type) {
          let b = ['<table class="table-bordered border border-dark">', "<tbody>", "<caption style='caption-side: top;padding:0;'><small class=\"text-muted\">" + escape(obj.className) + "</small></caption>"];
          if (null == visualize)
              for (let i in obj.value)
                  b.push("<tr class='border border-dark text-secondary text-center'>"),
                  b.push("<td class='bg-orange border-dark p-1 pr-2 pl-2'>" + escape(i) + "</td>"),
                  b.push("<td class='bg-cream border-dark p-1 pr-2 pl-2'>" + parse(obj.value[i], obj.value[i].visualize) + "</td>"),
                  b.push("</tr>");
          else {
              b.push("<tr class='border border-dark text-secondary text-left'><td>"),
              b.push("<canvas id='cv" + CHARTS.length + "' style='position: relative; height:300px; width:350px'></canvas>");
              let labels = []
                , data = [];
              for (let i in obj.value)
                  labels.push(i),
                  data.push(Number(obj.value[i].value));
              CHARTS.push(getChart(visualize, data, labels, obj.className)),
              b.push("</td></tr>")
          }
          return b.push("</tbody>"),
          b.push("</table>"),
          b.join("")
      }
      if ("Instance" == type) {
          let b = ["<table style='border:1px solid;'>", "<caption style='caption-side: top;padding:0;'><small class=\"text-muted\">" + escape(obj.className) + "のインスタンス</small></caption>", "<tbody>"];
          for (let i in obj.value)
              b.push("<tr>"),
              b.push("<td style='padding: .75rem;text-align: right;padding-right: 0px;'><div class='border border-dark bg-lightblue inline p-1 pl-2 pr-2'>" + escape(i) + "</div></td>"),
              b.push("<td class='bg-arrow'>　　　　　</td>"),
              b.push("<td style='padding: .75rem;padding-left: 0px;'>" + parse(obj.value[i], obj.value[i].visualize) + "</td>"),
              b.push("</tr>");
          return b.push("</tbody>"),
          b.push("</table>"),
          b.join("")
      }
      {
          let b = ["<table style='border:1px solid;'>", "<tbody>", "<caption style='caption-side: top;padding:0;'><small class=\"text-muted\">" + escape(obj.className) + "</small></caption>"];
          return b.push("<tr class='text-center'>"),
          b.push("<td class='bg-cream p-1 pr-2 pl-2 border border-dark'>" + escape(obj.value) + "</td>"),
          b.push("</tr>"),
          b.push("</tbody>"),
          b.push("</table>"),
          b.join("")
      }
  }
  function postMessageToBack(type, value) {
      isRunning() && worker.postMessage({
          type: type,
          value: value
      })
  }
  function step() {
      if (CUR < FIELDS_LIST.length - 1) {
          let e;
          CUR++,
          hilight(FIELDS_LIST[CUR])
      } else
          isRunning() && CUR == FIELDS_LIST.length - 1 && CUR++,
          isRunning() && postMessageToBack("step");
      isRunning() || CUR != FIELDS_LIST.length - 1 ? $("#state-label").empty().append('<span class="badge badge-danger">ステップ実行中</span>') : $("#state-label").empty().append('<span class="badge badge-info">ステップ実行終了</span>')
  }
  function run() {
      $("#stepLabel").empty().append("ビューワー"),
      $("#curcontent").hide(),
      $("#curclosebtn").hide(),
      editor.session.clearBreakpoints(),
      editor.session.removeMarker(CUR_MARKER),
      FIELDS_LIST = [],
      stepRange.max = 0,
      STEP_COUNT = 0,
      CUR = 0,
      INPUT_PAUSING = !1,
      STATE_RUNNING = !0,
      (worker = createWorker()).onmessage = onMessage,
      $("#state-label").empty().append('<span class="badge badge-danger">実行中</span>'),
      iostream.clear(),
      deleteErrorPos(),
      Graphics.init(),
      clearVarTable();
      let code = editor.getValue().trim() + "\n";
      editor.setValue(code),
      editor.session.setUndoManager(new ace.UndoManager),
      editor.clearSelection(),
      editor.setOption("readOnly", !0),
      postMessageToBack("run", code)
  }
  function step_run() {
      $("#stepLabel").empty().append("ビューワー(0ステップ目)"),
      $("#curcontent").hide(),
      $("#curclosebtn").hide(),
      editor.session.clearBreakpoints(),
      editor.session.removeMarker(CUR_MARKER),
      FIELDS_LIST = [],
      STEP_COUNT = 0,
      stepRange.max = 0,
      CUR = 0,
      INPUT_PAUSING = !1,
      STATE_RUNNING = !0,
      (worker = createWorker()).onmessage = onMessage;
      let code = editor.getValue().trim() + "\n";
      editor.setValue(code),
      editor.session.setUndoManager(new ace.UndoManager),
      editor.clearSelection(),
      editor.setOption("readOnly", !0),
      postMessageToBack("step_run", code),
      $("#state-label").empty().append('<span class="badge badge-danger">ステップ実行中</span>'),
      iostream.clear(),
      deleteErrorPos(),
      Graphics.init(),
      clearVarTable(),
      STEP_GENERATOR = generate(),
      step()
  }
  function stop() {
      isRunning() && worker.terminate(),
      clearInterval(skipInterval),
      worker = null,
      FIELDS_LIST = [],
      STEP_COUNT = 0,
      CUR = 0,
      STATE_RUNNING = !1,
      stepRange.max = 0,
      iostream.closeStream(),
      $("#state-label").empty().append('<span class="badge badge-info">実行待ち</span>'),
      editor.session.clearBreakpoints(),
      editor.session.removeMarker(CUR_MARKER),
      editor.setOption("readOnly", !1),
      STEP_GENERATOR = null
  }
  function createWorker() {
      return TSUCHINOKO.createWorker()
  }
  function isRunning() {
      return null !== worker
  }
  function toStepRun() {
      stop(),
      IS_STEP_RUN = !0,
      $("#run").hide(),
      $("#first,#prev,#pause,#step,#last,#stepRange-base").show(),
      $("#stepLabel").empty().append("ビューワー(0ステップ目)"),
      editor.session.clearBreakpoints(),
      editor.session.removeMarker(CUR_MARKER),
      FIELDS_LIST = [],
      STEP_COUNT = 0,
      CUR = 0,
      stepRange.max = 0
  }
  function toRun() {
      stop(),
      IS_STEP_RUN = !1,
      STEP_GENERATOR = null,
      $("#run").show(),
      $("#first,#prev,#pause,#step,#last,#stepRange-base").hide(),
      $("#stepLabel").empty().append("ビューワー"),
      editor.session.clearBreakpoints(),
      editor.session.removeMarker(CUR_MARKER),
      stepRange.max = 0,
      STEP_COUNT = 0
  }
  document.getElementById("profile_graph").addEventListener("click", (function(e) {
      let ce = profileChart.getElementsAtEvent(e);
      if (ce.length > 0) {
          let key = [].slice.call(ce[0]._model.label).join("");
          void 0 !== LINKER_EVENTS[key] && LINKER_EVENTS[key]()
      }
  }
  )),
  $("#profileOpt").on("click", (function(e) {
      "off" == $("#profilelb")[0].innerText ? $("#profilelb").text("on") : $("#profilelb").text("off")
  }
  )),
  stepRange.addEventListener("input", (function(e) {
      IS_STEP_RUN && MAX_STEP > 0 && (CUR = Number(e.target.value),
      hilight(FIELDS_LIST[CUR]),
      0 == CUR ? $("#state-label").empty().append('<span class="badge badge-info">実行待ち</span>') : $("#state-label").empty().append('<span class="badge badge-danger">ステップ実行中</span>'),
      isRunning() || CUR != FIELDS_LIST.length - 1 || $("#state-label").empty().append('<span class="badge badge-info">ステップ実行終了</span>'))
  }
  )),
  $("#toRun").on("click", (function() {
      toRun(),
      IS_STEP_RUN || isRunning() || run()
  }
  )),
  $("#toStepRun").on("click", (function() {
      toStepRun(),
      IS_STEP_RUN && !isRunning() && step_run()
  }
  ));
  var STEP_GENERATOR = null, skipInterval;
  function *generate() {
      for (; isRunning(); )
          INPUT_PAUSING || (yield step());
      STEP_GENERATOR = null,
      clearInterval(skipInterval)
  }
  function skipTicker() {
      isRunning() && STEP_GENERATOR && !INPUT_PAUSING && MAX_STEP > 0 && $("#step").trigger("click"),
      MAX_STEP < 0 && clearInterval(skipInterval),
      MAX_STEP = 1e3
  }
  $("#last").on("click", (function() {
      if (STATE_RUNNING && !INPUT_PAUSING) {
          if (!INPUT_PAUSING)
              if (MAX_STEP = 1e3,
              isRunning())
                  clearInterval(skipInterval),
                  skipInterval = setInterval(skipTicker, 1);
              else {
                  function s() {
                      CUR < FIELDS_LIST.length ? (hilight(FIELDS_LIST[CUR]),
                      CUR++,
                      MAX_STEP > 0 ? setTimeout(s, 1) : MAX_STEP = 1e3) : (CUR = FIELDS_LIST.length - 1,
                      MAX_STEP = 1e3,
                      hilight(FIELDS_LIST[CUR]),
                      $("#state-label").empty().append('<span class="badge badge-info">ステップ実行終了</span>'))
                  }
                  MAX_STEP > 0 && s()
              }
          isRunning() || CUR != FIELDS_LIST.length - 1 ? $("#state-label").empty().append('<span class="badge badge-danger">ステップ実行中</span>') : $("#state-label").empty().append('<span class="badge badge-info">ステップ実行終了</span>')
      }
  }
  )),
  $("#step").on("click", (function() {
      IS_STEP_RUN && !INPUT_PAUSING && STATE_RUNNING && STEP_GENERATOR && (step(),
      MAX_STEP = 1e3)
  }
  )),
  $("#prev").on("click", (function() {
      IS_STEP_RUN && !INPUT_PAUSING && STATE_RUNNING && (prev(),
      MAX_STEP = 1e3)
  }
  )),
  $("#pause").on("click", (function() {
      IS_STEP_RUN && !INPUT_PAUSING && STATE_RUNNING && MAX_STEP > 0 && (MAX_STEP = -1)
  }
  )),
  $("#first").on("click", (function() {
      if (IS_STEP_RUN && !INPUT_PAUSING && FIELDS_LIST.length > 0 && STATE_RUNNING) {
          function s() {
              CUR > 0 ? (CUR--,
              MAX_STEP > 0 ? setTimeout(s, 1) : MAX_STEP = 1e3) : (CUR = 0,
              MAX_STEP = 1e3,
              $("#state-label").empty().append('<span class="badge badge-info">実行待ち</span>')),
              hilight(FIELDS_LIST[CUR])
          }
          (MAX_STEP = 1e3) > 0 && (clearInterval(skipInterval),
          s())
      }
  }
  )),
  $("#stop").on("click", (function() {
      stop()
  }
  )),
  toRun(),
  $((function() {
      function measureSize() {
          var ww;
          $(window).width() < 1080 ? ($("#editorBase").appendTo("#top-container"),
          $("#component2").appendTo("#bottom-right-container"),
          $("#component1").appendTo("#bottom-left-container"),
          $("#split-pane-frame-h").css({
              height: "0",
              visibility: "hidden"
          }),
          $("#split-pane-frame-v").css({
              height: "calc(100% - 10px)",
              visibility: "unset"
          }),
          $("#left-component #right-component #split-pane-component-base-h").css({
              height: "0"
          }),
          $("#split-pane-component-base-v").css({
              top: "unset"
          }),
          $("#ips-open").show(),
          $("#ips-group").hide()) : ($("#editorBase").appendTo("#left-top-container"),
          $("#component2").appendTo("#right-component"),
          $("#component1").appendTo("#left-bottom-container"),
          $("#split-pane-frame-v").css({
              height: "0",
              visibility: "hidden"
          }),
          $("#split-pane-frame-h").css({
              height: "calc(100% - 50px)",
              visibility: "unset"
          }),
          $("#left-component #right-component #split-pane-component-base-h").css({
              height: "unset"
          }),
          $("#split-pane-component-base-v").css({
              top: "-50vh"
          }),
          $("#ips-open").hide(),
          $("#ips-group").show()),
          editor.resize(!0)
      }
      function closeMenu() {
          $("#dialog_close").trigger("click"),
          $("#example-names").prop("selectedIndex", 0)
      }
      function setExample(id) {
          void 0 !== EXAMPLES[id] && (editor.setValue(EXAMPLES[id]),
          editor.clearSelection())
      }
      function initExample() {
          let buf = []
            , c = 0;
          for (let i in EXAMPLES)
              0 == EXAMPLES[i].length ? (c > 0 && buf.push("</optgroup>"),
              buf.push("<optgroup label='" + i + "'>")) : buf.push("<option value='" + i + "'>" + i + "</option>"),
              c++;
          buf.push("</optgroup>"),
          $("#example-names").append(buf.join("\n")),
          $("#example-names").on("change", (function(e) {
              editor.getOption("readOnly") || (setExample(e.target.value),
              closeMenu())
          }
          ))
      }
      $("div.split-pane").splitPane(),
      $(window).on("load resize orientationchange", (function() {
          measureSize()
      }
      )),
      $(".split-pane-component-inner").on("resize", (function() {
          editor.resize(!0)
      }
      )),
      document.getElementById("load").addEventListener("change", (function(e) {
          let file = e.target.files
            , reader = new FileReader;
          reader.onload = function() {
              editor.setValue(reader.result),
              editor.clearSelection(),
              closeMenu()
          }
          ,
          file[0]instanceof Blob && reader.readAsText(file[0], "UTF-8")
      }
      )),
      $("#save_as_txt").on("click", (function() {
          $("#dialog_close").trigger("click")
      }
      )),
      $("#saveok").on("click", save_as_txt),
      $("#open_file").on("click", (function() {
          editor.getOption("readOnly") || $("#load").trigger("click")
      }
      )),
      initExample()
  }
  ));
  const LIMIT_OF_LINK_SIZE = 2e3;
  $("#createUrl").on("click", (function() {
      let url = TSUCHINOKO.createURL(editor.getValue());
      IS_STEP_RUN && (url += "&m=s&b=1"),
      $("#urlTxt").text(url.length <= 2e3 ? url : "プログラムが長すぎます."),
      url.length <= 2e3 ? $("#urlTxt").attr("href", url) : $("#urlTxt").removeAttr("href"),
      $("#dlqr").remove(),
      $("#qroutput").html("");
      try {
          $("#qroutput").qrcode({
              id: "qrcv",
              text: url,
              resolve: function() {
                  $("#qroutput").append("<div style='text-align:center;'><a id=\"dlqr\">QRコードをダウンロード</a></div>"),
                  $("#dlqr").on("click", (function() {
                      let canvas = document.getElementById("qrcv")
                        , link = document.createElement("a");
                      link.href = canvas.toDataURL("image/png"),
                      link.download = "QRコード.png",
                      link.click()
                  }
                  ))
              }
          })
      } catch {
          $("#qroutput").append("<div style='text-align:center;'><a>容量オーバーのためQRコードを生成できません</a></div>")
      }
  }
  )),
  $(window).on("load", (function() {
      if (Graphics.init(),
      location.search.length > 0) {
          let params = new URLSearchParams(location.search);
          if (params.has("code"))
              try {
                  let code = TSUCHINOKO.expand(params.get("code"));
                  editor.setValue(code),
                  params.has("m") && "s" == params.get("m") ? ($("#toStepRun").trigger("click"),
                  params.has("b") && ($("#step").trigger("click"),
                  setTimeout(()=>{
                      $("#last").trigger("click")
                  }
                  , 500))) : $("#toRun").trigger("click"),
                  editor.session.setUndoManager(new ace.UndoManager)
              } catch {}
      } else
          editor.setValue(TSUCHINOKO.expand(DEFAULT_CODE)),
          editor.session.setUndoManager(new ace.UndoManager),
          editor.clearSelection();
      let cls = "class='btn btn-sm ipb' style='border: 1px solid;'"
        , cls1 = "class='btn btn-sm ipbs' style='border: 1px solid;'";
      $("body").prepend("<div id='cur' style='background-color: white;border: 1px solid #505050;border-radius: 2px;position: absolute;z-index: 11;box-shadow: #c7c7c7 2px 2px 4px;'><div style='display: inline-block;width: 100%;background-color: aliceblue;display: table;'><div id='curbtn' style='cursor:pointer;color: #2196f3;display: inline-block;float:left;'>^</div><div id='curclosebtn' style='display:none;cursor:pointer;color: #2196f3;display: inline-block;float:right;margin-right:5px;'>×</div></div><div id='curcontent' style='display:block;max-height: 110px;overflow: auto;overflow-x: hidden;'>" + ["<div>", "<div style='background-color: #f0f0f0;font-size: .875rem;display: inline-block;width: 100%;display: table;'>入力支援</div>", "<div style='display:grid;'>", "<button " + cls1 + " onclick=\"$('#ips-group-statements0').trigger('click')\">標準出力</button>", "<button " + cls1 + " onclick=\"$('#ips-group-statements1').trigger('click')\">標準出力(区切りあり)</button>", "<button " + cls1 + " onclick=\"$('#ips-group-statements2').trigger('click')\">標準入力</button>", "<button " + cls1 + " onclick=\"$('#ips-group-statements3').trigger('click')\">標準入力(メッセージあり)</button>", "<button " + cls1 + " onclick=\"$('#ips-group-statements4').trigger('click')\">代入</button>", "<button " + cls1 + " onclick=\"$('#ips-group-statements5').trigger('click')\">条件分岐文(if文)</button>", "<button " + cls1 + " onclick=\"$('#ips-group-statements6').trigger('click')\">条件分岐文(if-else文)</button>", "<button " + cls1 + " onclick=\"$('#ips-group-statements7').trigger('click')\">条件分岐文(if-elif-else文)</button>", "<button " + cls1 + " onclick=\"$('#ips-group-statements8').trigger('click')\">順次繰返し文(for文)</button>", "<button " + cls1 + " onclick=\"$('#ips-group-statements9').trigger('click')\">順次繰返し文(for-in文)</button>", "<button " + cls1 + " onclick=\"$('#ips-group-statements10').trigger('click')\">条件繰返し文(while文)</button>", "<button " + cls1 + " onclick=\"$('#ips-group-statements11').trigger('click')\">関数定義</button>", "<button " + cls1 + " onclick=\"$('#ips-group-statements12').trigger('click')\">関数定義(戻り値あり)</button>", "<button " + cls1 + " onclick=\"$('#ips-group-statements13').trigger('click')\">クラス定義</button>", "<button " + cls1 + " onclick=\"$('#ips-group-statements14').trigger('click')\">呼び出し</button>", "<button " + cls1 + " onclick=\"$('#ips-group-statements15').trigger('click')\">配列</button>", "<button " + cls1 + " onclick=\"$('#ips-group-statements16').trigger('click')\">タプル</button>", "<button " + cls1 + " onclick=\"$('#ips-group-statements17').trigger('click')\">辞書</button>", "<button " + cls1 + " onclick=\"$('#ips-group-statements18').trigger('click')\">集合</button>", "</div>", "</div>"].join("") + ["<div>", "<div style='background-color: #f0f0f0;font-size: .875rem;display: inline-block;width: 100%;display: table;'>演算子</div>", "<div class='btn-group'>", "<button " + cls + ">+</button>", "<button " + cls + ">-</button>", "<button " + cls + ">*</button>", "<button " + cls + ">**</button>", "<button " + cls + ">/</button>", "<button " + cls + ">//</button>", "<button " + cls + ">%</button>", "</div>", "</div>"].join("") + ["<div>", "<div class='btn-group'>", "<button " + cls + ">&lt;&lt;</button>", "<button " + cls + ">&gt;&gt;</button>", "<button " + cls + ">~</button>", "<button " + cls + ">^</button>", "<button " + cls + ">&</button>", "<button " + cls + ">|</button>", "</div>", "</div>"].join("") + ["<div>", "<div class='btn-group'>", "<button " + cls + ">and</button>", "<button " + cls + ">or</button>", "<button " + cls + ">not</button>", "</div>", "</div>"].join("") + ["<div>", "<div class='btn-group'>", "<button " + cls + ">が</button>", "<button " + cls + ">の要素</button>", "<button " + cls + ">の要素でない</button>", "</div>", "</div>"].join("") + ["<div>", "<div class='btn-group'>", "<button " + cls + ">もし</button>", "<button " + cls + ">ならば</button>", "<button " + cls + ">そうでなければ</button>", "</div>", "</div>"].join("") + ["<div>", "<div style='background-color: #f0f0f0;font-size: .875rem;display: inline-block;width: 100%;display: table;'>比較演算子</div>", "<div class='btn-group'>", "<button " + cls + ">&lt;</button>", "<button " + cls + ">&gt;</button>", "<button " + cls + ">&lt;=</button>", "<button " + cls + ">&gt;=</button>", "<button " + cls + ">==</button>", "<button " + cls + ">!=</button>", "</div>", "</div>"].join("") + ["<div>", "<div style='background-color: #f0f0f0;font-size: .875rem;display: inline-block;width: 100%;display: table;'>代入演算子</div>", "<div class='btn-group'>", "<button " + cls + ">=</button>", "<button " + cls + ">+=</button>", "<button " + cls + ">-=</button>", "<button " + cls + ">*=</button>", "<button " + cls + ">**=</button>", "</div>", "</div>"].join("") + ["<div>", "<div class='btn-group'>", "<button " + cls + ">/=</button>", "<button " + cls + ">//=</button>", "<button " + cls + ">%=</button>", "<button " + cls + ">&=</button>", "<button " + cls + ">|=</button>", "<button " + cls + ">^=</button>", "</div>", "</div>"].join("") + ["<div>", "<div class='btn-group'>", "<button " + cls + ">&lt;&lt;=</button>", "<button " + cls + ">&gt;&gt;=</button>", "</div>", "</div>"].join("") + ["<div>", "<div style='background-color: #f0f0f0;font-size: .875rem;display: inline-block;width: 100%;display: table;'>数字</div>", "<div class='btn-group'>", "<button " + cls + ">0</button>", "<button " + cls + ">1</button>", "<button " + cls + ">2</button>", "<button " + cls + ">3</button>", "<button " + cls + ">4</button>", "</div>", "</div>"].join("") + ["<div>", "<div class='btn-group'>", "<button " + cls + ">5</button>", "<button " + cls + ">6</button>", "<button " + cls + ">7</button>", "<button " + cls + ">8</button>", "<button " + cls + ">9</button>", "</div>", "</div>"].join("") + ["<div>", "<div style='background-color: #f0f0f0;font-size: .875rem;display: inline-block;width: 100%;display: table;'>その他</div>", "<div class='btn-group'>", "<button " + cls + ">()</button>", "<button " + cls + ">[]</button>", "<button " + cls + ">{}</button>", "<button " + cls + ">,</button>", "<button " + cls + ">:</button>", "<button " + cls + '>""</button>', "<button " + cls + '>""""""</button>', "<button " + cls + ">#</button>", "</div>", "</div>"].join("") + "</div></div>"),
      $(".ipb").on("click", (function(e) {
          editor.insert(e.target.textContent)
      }
      )),
      $("#curbtn").on("click", (function() {
          "none" == $("#curcontent").css("display") ? ($("#curcontent").show(),
          $("#curclosebtn").show()) : ($("#curcontent").hide(),
          $("#curclosebtn").hide())
      }
      )),
      $("#curclosebtn").on("click", (function() {
          "none" == $("#curcontent").css("display") ? ($("#curcontent").show(),
          $("#curclosebtn").show()) : ($("#curcontent").hide(),
          $("#curclosebtn").hide())
      }
      )),
      $("#curcontent").hide(),
      $("#curclosebtn").hide(),
      setInterval(()=>{
          let p = $($(".ace_cursor")[0]).offset()
            , rec = $(".ace_scroller")
            , q = rec.offset();
          !STATE_RUNNING && q.left <= p.left && q.top <= p.top && p.left < rec.width() + q.left && p.top < rec.height() + q.top ? $("#cur").css({
              display: "block",
              transform: "translate(calc(" + p.left + "px - 5px), calc(" + p.top + "px + " + CURRENT_FONT_SIZE + " + 3px))"
          }) : $("#cur").css({
              display: "none"
          })
      }
      , 10)
  }
  ));
  var IPS_ENTERED = !1;
  const INPUT_SUPPORTS = {
      "標準出力": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "表示する("
          }, {
              type: "VALUE",
              value: "<表示する値>",
              color: "info",
              defaultValue: '"Hello"'
          }, {
              type: "TEXT",
              value: ")"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<表示する値>",
              target: 2,
              color: "info"
          }]
      },
      "標準出力(区切りあり)": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "表示する("
          }, {
              type: "VALUE",
              value: "<表示する値>",
              color: "primary",
              defaultValue: '"A","B","C"'
          }, {
              type: "TEXT",
              value: ",区切り="
          }, {
              type: "VALUE",
              value: "<区切り>",
              color: "info",
              defaultValue: '" "'
          }, {
              type: "TEXT",
              value: ")"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<表示する値>",
              target: 2,
              color: "primary"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<区切り>",
              target: 4,
              color: "info"
          }]
      },
      "標準入力": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "VARIABLE",
              value: "<変数名>",
              color: "primary",
              defaultValue: "x"
          }, {
              type: "TEXT",
              value: " = 入力(入力形式="
          }, {
              type: "SELECT",
              value: "<入力形式>",
              color: "info",
              defaultValue: '"文字列"'
          }, {
              type: "TEXT",
              value: ")"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<変数名>",
              target: 1,
              color: "primary"
          }, {
              type: "COLLAPSE_SELECT",
              target: 3,
              color: "info",
              selection: ['"文字列"', '"数値"', '"論理値"']
          }]
      },
      "標準入力(メッセージあり)": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "VARIABLE",
              value: "<変数名>",
              color: "primary",
              defaultValue: "x"
          }, {
              type: "TEXT",
              value: " = 入力(メッセージ="
          }, {
              type: "VALUE",
              value: "<メッセージ>",
              color: "info",
              defaultValue: '"値を入力>>"'
          }, {
              type: "TEXT",
              value: ",入力形式="
          }, {
              type: "SELECT",
              value: '"文字列"',
              color: "info",
              defaultValue: '"文字列"'
          }, {
              type: "TEXT",
              value: ")"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<変数名>",
              target: 1,
              color: "primary"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<メッセージ>",
              target: 3,
              color: "info"
          }, {
              type: "COLLAPSE_SELECT",
              target: 5,
              color: "info",
              selection: ['"文字列"', '"数値"', '"論理値"']
          }]
      },
      "代入": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "VALUE",
              value: "<左辺>",
              color: "info",
              defaultValue: "x"
          }, {
              type: "TEXT",
              value: " "
          }, {
              type: "SELECT",
              value: "=",
              color: "primary",
              defaultValue: "="
          }, {
              type: "TEXT",
              value: " "
          }, {
              type: "VALUE",
              value: "<値>",
              color: "info",
              defaultValue: "1"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<変数名>",
              target: 1,
              color: "info"
          }, {
              type: "COLLAPSE_SELECT",
              target: 3,
              color: "primary",
              selection: ["=", "+=", "-=", "*=", "//=", "/=", "%=", "**=", "<<=", ">>=", "&=", "^=", "|="]
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<値>",
              target: 5,
              color: "info"
          }]
      },
      "条件分岐文(if文)": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "もし "
          }, {
              type: "VALUE",
              value: "<条件>",
              color: "primary",
              defaultValue: "True"
          }, {
              type: "TEXT",
              value: " ならば:"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<条件>",
              target: 2,
              color: "primary"
          }, {
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "    #<処理>"
          }, {
              type: "LINE_END"
          }]
      },
      "条件分岐文(if-else文)": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "もし "
          }, {
              type: "VALUE",
              value: "<条件>",
              color: "primary",
              defaultValue: "True"
          }, {
              type: "TEXT",
              value: " ならば:"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<条件>",
              target: 2,
              color: "primary"
          }, {
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "    #<処理>"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "そうでなければ:"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "    #<処理>"
          }, {
              type: "LINE_END"
          }]
      },
      "条件分岐文(if-elif-else文)": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "もし "
          }, {
              type: "VALUE",
              value: "<条件>",
              color: "primary",
              defaultValue: "True"
          }, {
              type: "TEXT",
              value: " ならば:"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<条件>",
              target: 2,
              color: "primary"
          }, {
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "    #<処理>"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "そうでなくもし "
          }, {
              type: "VALUE",
              value: "<条件>",
              color: "info",
              defaultValue: "True"
          }, {
              type: "TEXT",
              value: " ならば:"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<条件>",
              target: 13,
              color: "info"
          }, {
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "    #<処理>"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "そうでなければ:"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "    #<処理>"
          }, {
              type: "LINE_END"
          }]
      },
      "順次繰返し文(for文)": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "VARIABLE",
              value: "<変数名>",
              color: "primary",
              defaultValue: "i"
          }, {
              type: "TEXT",
              value: " を "
          }, {
              type: "VALUE",
              value: "<初期値>",
              color: "info",
              defaultValue: "0"
          }, {
              type: "TEXT",
              value: " から "
          }, {
              type: "VALUE",
              value: "<終了値>",
              color: "info",
              defaultValue: "10"
          }, {
              type: "TEXT",
              value: " まで "
          }, {
              type: "VALUE",
              value: "<増分>",
              color: "info",
              defaultValue: "1"
          }, {
              type: "TEXT",
              value: " ずつ"
          }, {
              type: "SELECT",
              value: "増やしながら繰り返す",
              color: "info",
              defaultValue: "増やしながら繰り返す"
          }, {
              type: "TEXT",
              value: ":"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<変数名>",
              target: 1,
              color: "primary"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<初期値>",
              target: 3,
              color: "info"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<終了値>",
              target: 5,
              color: "info"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<増分>",
              target: 7,
              color: "info"
          }, {
              type: "COLLAPSE_SELECT",
              target: 9,
              color: "info",
              selection: ["増やしながら繰り返す", "減らしながら繰り返す"]
          }, {
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "    #<処理>"
          }, {
              type: "LINE_END"
          }]
      },
      "順次繰返し文(for-in文)": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "VALUE",
              value: "<列挙する値>",
              color: "primary",
              defaultValue: "区間(0,10)"
          }, {
              type: "TEXT",
              value: " の要素 "
          }, {
              type: "VARIABLE",
              value: "<変数名>",
              color: "info",
              defaultValue: "i"
          }, {
              type: "TEXT",
              value: " について繰り返す:"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<列挙する値>",
              target: 1,
              color: "primary"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<変数名>",
              target: 3,
              color: "info"
          }, {
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "    #<処理>"
          }, {
              type: "LINE_END"
          }]
      },
      "条件繰返し文(while文)": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "VALUE",
              value: "<条件>",
              color: "primary",
              defaultValue: "True"
          }, {
              type: "TEXT",
              value: " の間繰り返す:"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<条件>",
              target: 1,
              color: "primary"
          }, {
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "    #<処理>"
          }, {
              type: "LINE_END"
          }]
      },
      "関数定義": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "関数 "
          }, {
              type: "VALUE",
              value: "<関数名>",
              color: "primary",
              defaultValue: "myFunction"
          }, {
              type: "TEXT",
              value: "("
          }, {
              type: "VALUE",
              value: "<引数>",
              color: "info",
              defaultValue: ""
          }, {
              type: "TEXT",
              value: ")"
          }, {
              type: "TEXT",
              value: ":"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<関数名>",
              target: 2,
              color: "primary"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<引数>",
              target: 4,
              color: "info"
          }, {
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "    #<処理>"
          }, {
              type: "LINE_END"
          }]
      },
      "関数定義(戻り値あり)": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "関数 "
          }, {
              type: "VALUE",
              value: "<関数名>",
              color: "primary",
              defaultValue: "myFunction"
          }, {
              type: "TEXT",
              value: "("
          }, {
              type: "VALUE",
              value: "<引数>",
              color: "info",
              defaultValue: ""
          }, {
              type: "TEXT",
              value: ")"
          }, {
              type: "TEXT",
              value: ":"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<関数名>",
              target: 2,
              color: "primary"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<引数>",
              target: 4,
              color: "info"
          }, {
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "    #<処理>"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "    "
          }, {
              type: "VALUE",
              value: "<戻り値>",
              color: "info",
              defaultValue: "0"
          }, {
              type: "TEXT",
              value: " を返す"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<引数>",
              target: 17,
              color: "info"
          }]
      },
      "クラス定義": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "クラス "
          }, {
              type: "VALUE",
              value: "<クラス名>",
              color: "primary",
              defaultValue: "MyClass"
          }, {
              type: "TEXT",
              value: ":"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<クラス名>",
              target: 2,
              color: "primary"
          }, {
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "    関数 "
          }, {
              type: "TEXT",
              value: "初期化"
          }, {
              type: "TEXT",
              value: "("
          }, {
              type: "VALUE",
              value: "<引数>",
              color: "info",
              defaultValue: ""
          }, {
              type: "TEXT",
              value: ")"
          }, {
              type: "TEXT",
              value: ":"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<引数>",
              target: 11,
              color: "info"
          }, {
              type: "LINE_BEGIN"
          }, {
              type: "TEXT",
              value: "        #<処理>"
          }, {
              type: "LINE_END"
          }]
      },
      "呼び出し": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "VALUE",
              value: "<関数名・クラス名>",
              color: "primary",
              defaultValue: "表示する"
          }, {
              type: "TEXT",
              value: "("
          }, {
              type: "VALUE",
              value: "<引数>",
              color: "info",
              defaultValue: '"Hello"'
          }, {
              type: "TEXT",
              value: ")"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<関数名・クラス名>",
              target: 1,
              color: "primary"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<引数>",
              target: 3,
              color: "info"
          }]
      },
      "配列": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "VALUE",
              value: "<左辺>",
              color: "primary",
              defaultValue: "x"
          }, {
              type: "TEXT",
              value: " = ["
          }, {
              type: "VALUE",
              value: "<値1,値2,...>",
              color: "info",
              defaultValue: "100,200,300"
          }, {
              type: "TEXT",
              value: "]"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<変数名>",
              target: 1,
              color: "primary"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<値1,値2,...>",
              target: 3,
              color: "info"
          }]
      },
      "タプル": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "VALUE",
              value: "<左辺>",
              color: "primary",
              defaultValue: "x"
          }, {
              type: "TEXT",
              value: " = ("
          }, {
              type: "VALUE",
              value: "<値1,値2,...>",
              color: "info",
              defaultValue: "100,200,300"
          }, {
              type: "TEXT",
              value: ")"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<変数名>",
              target: 1,
              color: "primary"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<値1,値2,...>",
              target: 3,
              color: "info"
          }]
      },
      "辞書": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "VALUE",
              value: "<左辺>",
              color: "primary",
              defaultValue: "x"
          }, {
              type: "TEXT",
              value: " = {"
          }, {
              type: "VALUE",
              value: "<キー1:値1,キー2:値2,...>",
              color: "info",
              defaultValue: '"A":100,"B":200,"C":300'
          }, {
              type: "TEXT",
              value: "}"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<変数名>",
              target: 1,
              color: "primary"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<キー1:値1,キー2:値2,...>",
              target: 3,
              color: "info"
          }]
      },
      "集合": {
          texts: [{
              type: "LINE_BEGIN"
          }, {
              type: "VALUE",
              value: "<左辺>",
              color: "primary",
              defaultValue: "x"
          }, {
              type: "TEXT",
              value: " = {"
          }, {
              type: "VALUE",
              value: "<値1,値2,...>",
              color: "info",
              defaultValue: "100,200,300"
          }, {
              type: "TEXT",
              value: "}"
          }, {
              type: "LINE_END"
          }, {
              type: "BR"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<変数名>",
              target: 1,
              color: "primary"
          }, {
              type: "COLLAPSE_VAR",
              placeholder: "<値1,値2,...>",
              target: 3,
              color: "info"
          }]
      }
  };
  function highlight() {
      var highlighter = ace.require("ace/ext/static_highlight");
      function qsa(sel) {
          for (var els = document.querySelectorAll(sel), result = [], i = 0, l = els.length; i < l; i++)
              "er" != ("" + els[i].className).split(" ")[0] && (result[i] = els[i]);
          return result
      }
      qsa("code[class]").forEach((function(el) {
          el.className.match(/language-(\w+)|(python)/) && highlighter.highlight(el, {
              mode: "ace/mode/python",
              theme: "ace/theme/tomorrow"
          })
      }
      ))
  }
  function highlight_() {
      var highlighter = ace.require("ace/ext/static_highlight");
      function qsa(sel) {
          for (var els = document.querySelectorAll(sel), result = [], i = 0, l = els.length; i < l; i++)
              result[i] = els[i];
          return result
      }
      qsa(".er").forEach((function(el) {
          el.className.match(/language-(\w+)|(python)/) && highlighter.highlight(el, {
              mode: "ace/mode/python",
              theme: "ace/theme/tomorrow"
          })
      }
      ))
  }
  function initIPS(key) {
      let maxLen = 50
        , varList = []
        , functionList = []
        , classList = []
        , builtinFList = ['<option value="入力">入力</option>', '<option value="表示する">表示する</option>', '<option value="ソート">ソート</option>', '<option value="マップ">マップ</option>', '<option value="型">型</option>', '<option value="終了">終了</option>', '<option value="要素数">要素数</option>', '<option value="集約">集約</option>', '<option value="可視化">可視化</option>']
        , builtinCList = ['<option value="論理値">論理値</option>', '<option value="数値">数値</option>', '<option value="文字列">文字列</option>', '<option value="区間">区間</option>', '<option value="配列">配列</option>', '<option value="辞書">辞書</option>', '<option value="集合">集合</option>', '<option value="タプル">タプル</option>', '<option value="object">object</option>', '<option value="math">math</option>', '<option value="random">random</option>', '<option value="datetime">datetime</option>']
        , valueList = ['<option value="0">0</option>', '<option value="1">1</option>', '<option value=\'""\'>""</option>', '<option value="True">True</option>', '<option value="False">False</option>', '<option value="self">self</option>', '<option value="super">super</option>', '<option value="[]">[]</option>', '<option value="()">()</option>', '<option value="{}">{}</option>', '<option value="NaN">NaN</option>', '<option value="Infinity">Infinity</option>', '<option value="None">None</option>']
        , opList = ['<option value="+">+</option>', '<option value="-">-</option>', '<option value="*">*</option>', '<option value="/">/</option>', '<option value="%">%</option>', '<option value="//">//</option>', '<option value="**">**</option>', '<option value=".">.</option>', '<option value="<<">&lt;&lt;</option>', '<option value=">>">&gt;&gt;</option>', '<option value=" and ">and</option>', '<option value=" or ">or</option>', '<option value=" not ">not</option>', '<option value="&&">&&</option>', '<option value="||">||</option>', '<option value="!">!</option>', '<option value="~">~</option>', '<option value="|">|</option>', '<option value="&">&</option>', '<option value="^">^</option>', '<option value="==">==</option>', '<option value="!=">!=</option>', '<option value="<">&lt;</option>', '<option value=">">&gt;</option>', '<option value="<=">&lt;=</option>', '<option value=">=">&gt;=</option>', '<option value=",">,</option>', '<option value=":">:</option>']
        , set = new Set;
      for (let i = 0; i < TOKENS.length; i++) {
          let t = TOKENS[i]
            , pt = i > 1 ? TOKENS[i - 1] : "";
          "VARIABLE" != t.type || set.has(t.expression) || ("KANSU" == pt.type ? functionList.push('<option value="' + t.expression + '">' + t.expression + "</option>") : "KURASU" == pt.type ? classList.push('<option value="' + t.expression + '">' + t.expression + "</option>") : varList.push('<option value="' + t.expression + '">' + t.expression + "</option>"),
          set.add(t.expression))
      }
      let stmt = INPUT_SUPPORTS[key];
      $("#input-support-content").empty();
      let buf = []
        , buttonEvents = []
        , inputEvents = []
        , selectEvents = []
        , selectUpdates = []
        , optEvents = [];
      for (let i = 0; i < stmt.texts.length; i++) {
          let text = stmt.texts[i]
            , _i = i;
          if ("TEXT" == text.type)
              buf.push('<pre id="ips-txt' + i + '" class="btn btn-sm font-weight-bold m-0 pr-0 pl-0" style="cursor: unset;background-color:transparent;"><code class="language-python">' + text.value + "</code></pre>");
          else if ("SELECT" == text.type)
              buf.push(['<button id="ips-btn' + i + '" class="btn rounded btn-sm btn-' + text.color + '" data-toggle="collapse" data-target="#ips-value-' + i + '" aria-expand="false" aria-controls="ips-value-' + i + '">', escape(text.value), "</button>"].join("\n")),
              buttonEvents.push({
                  id: _i,
                  f: function(e) {
                      for (let i = 0; i < buttonEvents.length; i++)
                          if (buttonEvents[i].id != _i) {
                              let c;
                              "collapse show" == $("#ips-value-" + buttonEvents[i].id).attr("class") && $("#ips-btn" + buttonEvents[i].id).trigger("click")
                          }
                      let v = $("#input-value-" + _i).prop("value");
                      $("#ips-btn" + _i).text(v);
                      for (let i = 0; i < buttonEvents.length; i++)
                          $("#ips-value-" + buttonEvents[i].id).css({
                              "margin-left": $("#ips-btn" + buttonEvents[i].id)[0].offsetLeft + "px",
                              transition: "unset"
                          })
                  }
              });
          else if ("VALUE" == text.type)
              buf.push(['<button id="ips-btn' + i + '" class="btn rounded btn-sm btn-' + text.color + '" data-toggle="collapse" data-target="#ips-value-' + i + '" aria-expand="false" aria-controls="ips-value-' + i + '">', escape(text.value), "</button>"].join("\n")),
              buttonEvents.push({
                  id: _i,
                  f: function(e) {
                      for (let i = 0; i < buttonEvents.length; i++)
                          if (buttonEvents[i].id != _i) {
                              let c;
                              "collapse show" == $("#ips-value-" + buttonEvents[i].id).attr("class") && $("#ips-btn" + buttonEvents[i].id).trigger("click")
                          }
                      let v = $("#input-value-" + _i).prop("value").trim();
                      v.length >= 50 && (v = v.slice(0, 50) + "..."),
                      $("#ips-btn" + _i).text(v.length > 0 ? v : $("#input-value-" + _i).attr("placeholder"));
                      for (let i = 0; i < buttonEvents.length; i++)
                          $("#ips-value-" + buttonEvents[i].id).css({
                              "margin-left": $("#ips-btn" + buttonEvents[i].id)[0].offsetLeft + "px",
                              transition: "unset"
                          })
                  }
              });
          else if ("VARIABLE" == text.type)
              buf.push(['<button id="ips-btn' + i + '" class="btn rounded btn-sm btn-' + text.color + '" data-toggle="collapse" data-target="#ips-value-' + i + '" aria-expand="false" aria-controls="ips-value-' + i + '">', escape(text.value), "</button>"].join("\n")),
              buttonEvents.push({
                  id: _i,
                  f: function(e) {
                      for (let i = 0; i < buttonEvents.length; i++)
                          if (buttonEvents[i].id != _i) {
                              let c;
                              "collapse show" == $("#ips-value-" + buttonEvents[i].id).attr("class") && $("#ips-btn" + buttonEvents[i].id).trigger("click")
                          }
                      let v = $("#input-value-" + _i).prop("value").trim();
                      v.length >= 50 && (v = v.slice(0, 50) + "..."),
                      $("#ips-btn" + _i).text(v.length > 0 ? v : $("#input-value-" + _i).attr("placeholder"));
                      for (let i = 0; i < buttonEvents.length; i++)
                          $("#ips-value-" + buttonEvents[i].id).css({
                              "margin-left": $("#ips-btn" + buttonEvents[i].id)[0].offsetLeft + "px",
                              transition: "unset"
                          })
                  }
              });
          else if ("LINE_BEGIN" == text.type)
              buf.push('<div class="btn-group text-nowrap" style="display: inline-block;">');
          else if ("LINE_END" == text.type)
              buf.push("</div>");
          else if ("BR" == text.type)
              buf.push("<br>");
          else if ("COLLAPSE_SELECT" == text.type) {
              let s = [];
              for (let i = 0; i < text.selection.length; i++)
                  s.push("<option value='" + escape(text.selection[i]) + "'>" + text.selection[i] + "</option>");
              buf.push(['<div class="collapse" id="ips-value-' + text.target + '">', '<div class="card card-body bg-' + text.color + '" style="width:300px">', '<div class="form-group mb-0">', '<select id="ips-select-' + text.target + '" class="form-control">', s.join("\n"), "</select>", "</div>", "</div>", "</div>"].join("\n")),
              optEvents.push({
                  id: text.target,
                  f: function(e) {
                      $("#ips-btn" + text.target).text($("#ips-select-" + text.target).prop("value"))
                  }
              })
          } else
              "COLLAPSE_VAR" == text.type && (buf.push(['<div class="collapse" id="ips-value-' + text.target + '">', '<div class="card card-body shadow mb-3 bg-' + text.color + '" style="width:300px">', '<div class="form-group mb-0">', '<div class="input-group">', '<div class="input-group-prepend">', '<select id="ips-select' + i + '" class="form-control" style="width: 20px;padding-left: 0px;padding-right: 0px;border-top-right-radius:0px;border-bottom-right-radius:0px;">', '<optgroup label="変数名">', varList.join("\n"), "</optgroup>", '<optgroup label="関数名">', functionList.join("\n"), "</optgroup>", '<optgroup label="クラス名">', classList.join("\n"), "</optgroup>", '<optgroup label="組み込み関数">', builtinFList.join("\n"), "</optgroup>", '<optgroup label="組み込みクラス">', builtinCList.join("\n"), "</optgroup>", '<optgroup label="演算子">', opList.join("\n"), "</optgroup>", '<optgroup label="値">', valueList.join("\n"), "</optgroup>", "</select>", "</div>", '<input id="input-value-' + text.target + '" class="form-control" type="text" style="width:calc(100% - 1.25rem);" placeholder="' + text.placeholder + '">', "</div>", "</div>", "</div>", "</div>"].join("\n")),
              inputEvents.push({
                  id: text.target,
                  f: function(e) {
                      if (13 == e.keyCode) {
                          for (let i = 0; i < buttonEvents.length; i++) {
                              let c;
                              "collapse show" == $("#ips-value-" + buttonEvents[i].id).attr("class") && $("#ips-btn" + buttonEvents[i].id).trigger("click")
                          }
                          let v = $("#input-value-" + text.target).prop("value").trim();
                          v.length >= 50 && (v = v.slice(0, 50) + "..."),
                          $("#ips-btn" + text.target).text(v.length > 0 ? v : $("#input-value-" + text.target).attr("placeholder"));
                          for (let i = 0; i < buttonEvents.length; i++)
                              $("#ips-value-" + buttonEvents[i].id).css({
                                  "margin-left": $("#ips-btn" + buttonEvents[i].id)[0].offsetLeft + "px",
                                  transition: "unset"
                              })
                      }
                  }
              }),
              selectEvents.push({
                  id: _i,
                  f: function(e) {
                      var textarea = $("#input-value-" + text.target)[0]
                        , sentence = textarea.value
                        , len = sentence.length
                        , pos = textarea.selectionStart
                        , before = sentence.substr(0, pos)
                        , word = e.target.value
                        , after = sentence.substr(pos, len);
                      sentence = before + word + after,
                      textarea.value = sentence
                  }
              }),
              selectUpdates.push(_i))
      }
      setInterval(()=>{
          let varList = []
            , functionList = []
            , classList = []
            , set = new Set;
          for (let i = 0; i < TOKENS.length; i++) {
              let t = TOKENS[i]
                , pt = i > 1 ? TOKENS[i - 1] : "";
              "VARIABLE" != t.type || set.has(t.expression) || ("KANSU" == pt.type ? functionList.push('<option value="' + t.expression + '">' + t.expression + "</option>") : "KURASU" == pt.type ? classList.push('<option value="' + t.expression + '">' + t.expression + "</option>") : varList.push('<option value="' + t.expression + '">' + t.expression + "</option>"),
              set.add(t.expression))
          }
          for (let i = 0; i < selectUpdates.length; i++)
              $("#ips-select" + selectUpdates[i]).empty(),
              $("#ips-select" + selectUpdates[i]).append(['<optgroup label="変数名">', varList.join("\n"), "</optgroup>", '<optgroup label="関数名">', functionList.join("\n"), "</optgroup>", '<optgroup label="クラス名">', classList.join("\n"), "</optgroup>", '<optgroup label="組み込み関数">', builtinFList.join("\n"), "</optgroup>", '<optgroup label="組み込みクラス">', builtinCList.join("\n"), "</optgroup>", '<optgroup label="演算子">', opList.join("\n"), "</optgroup>", '<optgroup label="値">', valueList.join("\n"), "</optgroup>"]),
              $("#ips-select" + selectUpdates[i]).prop("selectedIndex", -1)
      }
      , 1e3),
      $("#input-support-content").append(buf.join("\n")),
      highlight();
      for (let i = 0; i < buttonEvents.length; i++)
          $("#ips-btn" + buttonEvents[i].id).on("click", buttonEvents[i].f);
      for (let i = 0; i < inputEvents.length; i++)
          $("#input-value-" + inputEvents[i].id).on("keydown", inputEvents[i].f);
      for (let i = 0; i < selectEvents.length; i++)
          $("#ips-select" + selectEvents[i].id).on("change", selectEvents[i].f),
          $("#ips-select" + selectEvents[i].id).prop("selectedIndex", -1);
      for (let i = 0; i < optEvents.length; i++)
          $("#ips-select-" + optEvents[i].id).on("change", optEvents[i].f);
      setTimeout(()=>{
          for (let i = 0; i < buttonEvents.length; i++)
              $("#ips-btn" + buttonEvents[i].id)[0] ? $("#ips-value-" + buttonEvents[i].id).css({
                  "margin-left": $("#ips-btn" + buttonEvents[i].id)[0].offsetLeft + "px",
                  transition: "unset"
              }) : $("#ips-value-" + buttonEvents[i].id).css({
                  transition: "unset"
              })
      }
      , 1e3),
      $("#ips-modal-footer").empty().append('<button id="ips-close" type="button" class="btn btn-sm btn-primary" data-dismiss="modal">OK</button>'),
      $("#ips-close").on("click", (function() {
          let buf = [];
          for (let i = 0; i < stmt.texts.length; i++) {
              let text = stmt.texts[i];
              if ("TEXT" == text.type)
                  buf.push("" + text.value);
              else if ("VALUE" == text.type) {
                  let v = $("#input-value-" + i).prop("value").trim();
                  buf.push("" + (v.length > 0 ? v : text.defaultValue))
              } else if ("VARIABLE" == text.type) {
                  let v = $("#input-value-" + i).prop("value").trim();
                  buf.push("" + (v.length > 0 ? v : text.defaultValue))
              } else if ("BR" == text.type)
                  buf.push("\n");
              else if ("SELECT" == text.type) {
                  let v = $("#ips-select-" + i).prop("value");
                  buf.push("" + v)
              }
          }
          buf = buf.join("").split("\n");
          let tab = editor.session.getLine(editor.getCursorPosition().row).match(/^\s*/)[0]
            , code = [];
          for (let i = 0; i < buf.length; i++)
              code.push((0 == i ? "" : tab) + buf[i]);
          editor.insert(code.join("\n"))
      }
      ))
  }
  $("#ipsopen").on("click", (function() {
      IPS_ENTERED || ($("#statements").prop("selectedIndex", 0),
      initIPS("標準出力"),
      IPS_ENTERED = !0)
  }
  )),
  $("#ips-open").on("click", (function() {
      editor.getOption("readOnly") || $("#ipsopen").trigger("click")
  }
  )),
  $("#statements").on("change", (function(e) {
      initIPS(e.target.value)
  }
  )),
  function() {
      let optionElm = $("#statements").children("optgroup").children("option")
        , k = 0
        , mmm = [];
      for (let i in optionElm)
          if (void 0 !== optionElm[i].value) {
              let val = optionElm[i].value
                , kk = k;
              mmm.push('"<button "+cls1+" onclick=\\"$(\'#ips-group-statements' + kk + "').trigger('click')\\\">" + val + '</button>"'),
              $("#ips-group").append('<button id="ips-group-statements' + kk + '" class="btn btn-sm btn-light">' + val + "</button>"),
              $("#ips-group-statements" + kk).on("click", (function() {
                  editor.getOption("readOnly") || ($("#ipsopen").trigger("click"),
                  setTimeout(()=>{
                      $("#statements").prop("selectedIndex", kk),
                      setTimeout(()=>{
                          initIPS(val)
                      }
                      , 100)
                  }
                  , 100))
              }
              )),
              k++
          }
  }(),
  clearVarTable()
}();
